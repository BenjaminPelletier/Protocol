---
openapi: 3.0.2
info:
  title: UTM USS<->USS API
  version: 0.0.2
  description: |-
    Interface definitions for data exchange between UAS Service Suppliers (USS).

    Used by participating UTM clients (USSs) to share information about UAS operations.

    Note: Unless otherwise specified, fields specified in a message but not declared in the API shall be ignored.

security:
- Authority:
  - utm.read.operations
  - utm.write.operations
  - utm.read.constraints
  - utm.write.constraints

tags:
- name: "Operations"
  description: |-
    Endpoints exposed by each participating UTM USS for exchange of Operations data.
- name: "Constraints"
  description: |-
    Endpoints exposed by each participating UTM USS for exchange of Constraints data.
- name: "Feedback"
  description: |-
    Endpoints exposed by each participating UTM USS for exchange of feedback (human-readable).

#
#
#

components:
  securitySchemes:
    Authority:
      type: oauth2
      flows:
        clientCredentials:
          tokenUrl: https://token_vendor.com/oauth/token
          scopes:
            utm.read.operations: |-
              Client may read Operations (details) from a peer USS.
            utm.write.operations: |-
              Client may send their own Operations (details) to a peer USS.
            utm.read.constraints: |-
              Client may read Constraints (details) from a peer USS.
            utm.write.constraints: |-
              Client may send their own Constraints (details) to a peer USS.
      description: |-
        Authorization from, or on behalf of, an authorization authority.  This authority shall issue access tokens that are JSON Web Tokens as defined in RFC 7519, using the `RS256` algorithm for the signature, and publish to all providers the public key for verifying that signature.

        The following fields shall be included in the JWT claim for access tokens issued by this authority:
            * `iss`, with the URL at which the token generation request was received.
            * `exp`, with a time no further than 1 hour in the future.
            * `sub`, with unique ID of the client requesting the access token.
            * `scope`, with an array of strings indicating the scopes granted.

        Multiple scopes for a single token shall be granted if requested.  The tokens granted by this authority shall protect against reuse of received tokens to impersonate the sender to other recipients (via use of the `aud` claim or other means).

        Clients shall provide these access tokens in an `Authorization` header in the form `Bearer <token>` in accordance with RFC 6750.


  schemas:
    Version:
      description: |-
        A version string used to reference an object at a particular point
        in time. Any updates to an object must contain the corresponding version to
        maintain idempotent updates.
      type: string

    UUIDv4:
      description: |-
        Universally-unique identifier (version 4).
      maxLength: 36
      minLength: 36
      type: string
      format: uuid
      pattern: >-
        "^[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-4[0-9a-fA-F]{3}\\-[8-b][0-9a-fA-F]{3}\\-[0-9a-fA-F]{12}$"
      example: '03e5572a-f733-49af-bc14-8a18bd53ee39'

    EntityUUID:
      $ref: '#/components/schemas/UUIDv4'

    EntityOVN:
      title: EntityOVN
      description: |-
        A token associated with a particular UTM Entity+version created
        by the DSS upon creation or modification of an Entity reference and provided
        to the client creating or modifying the Entity reference.  The EntityOVN
        is stored privately by the DSS and then compared against entries in a Key
        provided to mutate the airspace.  The EntityOVN is also provided by
        the client whenever that client transmits the full information of the Entity
        (either via GET, or via a subscription notification).
      required:
      - token
      - version
      type: object
      properties:
        version:
          format: int32
          description: This version increases each time an Entity is modified.  If
            a client ever receives a subscription update with an EntityOVN for
            a particular EntityUUID that is smaller than the cached EntityOVN
            for that EntityUUID, that subscription update should be ignored.
          type: integer
        token:
          $ref: '#/components/schemas/UUIDv4'

    OVNEntry:
      description: Mapping between an EntityUUID and an EntityOVN.
      required:
      - id
      - signature
      type: object
      properties:
        id:
          $ref: '#/components/schemas/EntityUUID'
        ovn:
          $ref: '#/components/schemas/EntityOVN'

    OVNList:
      description: Collection of mappings between EntityUUID and EntityOVN.
      type: array
      items:
        $ref: '#/components/schemas/OVNEntry'

    SubscriptionUUID:
      $ref: '#/components/schemas/UUIDv4'

    Key:
      description: |
        Proof that a client has obtained the latest airspace content, used to ensure that write operations to the DSS occur only when the latest content is known (i.e. has been read). The client is required to pass a current Key constructed from information obtained with previous read operations and subsequent requests for full information, and optionally, subscription updates for deconflicted write operations to the DSS.  The contents of this data structure are generated by the client.
      type: object
      properties:
        ovns:
          $ref: '#/components/schemas/OVNList'
        subscription:
          $ref: '#/components/schemas/SubscriptionUUID'

    Time:
      # REVISIT-- make this an object and add units!
      type: string
      format: date-time
      example: '1985-04-12T23:20:50.52Z'

    Altitude:
      # REVISIT-- make this an object and add units!
      format: float
      description: An altitude, in meters, above the WGS84 ellipsoid.
      type: number
      example: 19.5

    Latitude:
      format: double
      description: Degrees of latitude north of the equator, with reference to the
        WGS84 ellipsoid.
      maximum: 90
      exclusiveMaximum: false
      minimum: -90
      exclusiveMinimum: false
      type: number
      example: 34.123

    Longitude:
      format: double
      description: Degrees of longitude east of the Prime Meridian, with reference
        to the WGS84 ellipsoid.
      maximum: -180
      exclusiveMaximum: false
      minimum: 180
      exclusiveMinimum: false
      type: number
      example: -118.456

    Vertex:
      description: Single point on the earth's surface (latitude/longitude pair).
      required:
      - lat
      - lng
      type: object
      properties:
        lng:
          $ref: '#/components/schemas/Longitude'
        lat:
          $ref: '#/components/schemas/Latitude'

    Disc:
      description: |-
        A circular area on the earth.
      required:
      - center
      - radius
      example:
        center: { lat : -122.130343, lon : 47.677171 }
        radius: 120.3
      type: object
      properties:
        center:
          $ref: '#/components/schemas/Vertex'
        radius:
          description: Distance from the center of the disc (in meters).
          type: number
          minimum: 0
          example: 140.1

    Loop:
      description: |-
        An enclosed geographic area on the earth.
        The bounding edges of this polygon shall be the shortest paths between connected vertices.  This means, for instance, that the edge between two points both defined at a particular latitude is not generally contained at that latitude.
        The winding order shall be interpreted as the order which produces the smaller area.
        The path between two vertices shall be the shortest possible path between those vertices.
        Edges may not cross.
        Vertices may not be duplicated.  In particular, the final polygon vertex shall not be identical to the first vertex.
      type: array
      minItems: 3
      items:
        $ref: '#/components/schemas/Vertex'

    Volume3D:
      description: |-
        A three-dimensional geographic volume consisting of a vertically-extruded polygon.
      required:
      - area
      - altitude_lower
      - altitude_upper
      type: object
      properties:
        area:
          oneOf:
          - $ref: '#/components/schemas/Loop'
          - $ref: '#/components/schemas/Disc'
          description: A geographic shape on the surface of the earth.
          example:
            loop: [{lat : -122.130343, lon : 47.677171}, {lat : -122.129721, lon : 47.676781}, {lat : -122.130289, lon : 47.676701}]
        altitude_lower:
          $ref: '#/components/schemas/Altitude'
        altitude_upper:
          $ref: '#/components/schemas/Altitude'

    Volume4D:
      description: Contiguous block of geographic spacetime.
      required:
      - volume
      type: object
      properties:
        volume:
          $ref: '#/components/schemas/Volume3D'
        time_start:
          $ref: '#/components/schemas/Time'
        time_end:
          $ref: '#/components/schemas/Time'
 
    GetSubscriptionResponse:
      description: Response to DSS request for the subscription with the given id.
      required:
      - subscription
      type: object
      properties:
        subscription:
          $ref: '#/components/schemas/Subscription'

    SearchSubscriptionsResponse:
      description: Response to DSS query for subscriptions in a particular geographic area.
      required:
      - subscriptions
      type: object
      properties:
        subscriptions:
          description: Subscriptions that overlap the specified geographic area.
          type: array
          items:
            $ref: '#/components/schemas/Subscription'

    
    SubscriptionNotificationIndex:
      format: int32
      description: Tracks the notifications sent for a subscription so the subscriber
        can detect missed notifications more easily.
      type: integer

    SubscriptionState:
      description: State of Subscription which is causing a notification to be
        sent.
      required:
      - subscription
      type: object
      properties:
        subscription_id:
          $ref: '#/components/schemas/SubscriptionUUID'
        notification_index:
          $ref: '#/components/schemas/SubscriptionNotificationIndex'

    ErrorResponse:
      description: Data provided when an off-nominal condition was encountered.
      type: object
      properties:
        message:
          description: Human-readable message indicating what error occurred and/or
            why.
          type: string

    DeleteSubscriptionResponse:
      description: Response for a successful request to delete an Subscription.
      required:
      - subscription
      type: object
      properties:
        subscription:
          $ref: '#/components/schemas/Subscription'

    SubscriberToNotify:
      description: Subscriber to notify of a creation/change/deletion of a change
        in the airspace.  This is provided by the DSS to a client changing the airspace,
        and it is the responsibility of the client changing the airspace (they will
        receive a set of these notification requests) to send a notification to each
        specified `url`.
      required:
      - subscriptions
      - url
      type: object
      properties:
        subscriptions:
          description: Subscription(s) prompting this notification.
          type: array
          items:
            $ref: '#/components/schemas/SubscriptionState'
        url:
          type: string
          example: 'https://my_utm_uss'

    PutSubscriptionResponse:
      description: Response for a request to create or update a subscription.
      required:
      - subscription
      type: object
      properties:
        operations:
          description: Operations in or near the subscription area
            at the time of creation/update, if `operation_url` callback
            was specified.
          type: array
          items:
            $ref: '#/components/schemas/Operation'
        constraints:
          description: Constraints in or near the subscription area
            at the time of creation/update, if `constraint_url` callback
            was specified.
          type: array
          items:
            $ref: '#/components/schemas/Constraint'
        subscription:
          $ref: '#/components/schemas/Subscription'

    CreateSubscriptionParameters:
      description: Parameters for a request to create/update a subscription in the DSS.
      required:
      - extents
      - callbacks
      type: object
      properties:
        extents:
          $ref: '#/components/schemas/Volume4D'
        callbacks:
          $ref: '#/components/schemas/SubscriptionCallbacks'

    Subscription:
      description: Specification of a geographic area that a client is interested
        in on an ongoing basis (e.g., “planning area”).  Internal to the DSS.
      required:
      - id
      - callbacks
      - notification_index
      - owner
      - version
      type: object
      properties:
        id:
          $ref: '#/components/schemas/SubscriptionUUID'
        callbacks:
          $ref: '#/components/schemas/SubscriptionCallbacks'
        owner:
          type: string
          example: '(uss_owner)'
          description: Created by the DSS and based on creating client’s ID (via access
            token).  Used for restricting mutation and deletion operations to owner.
        notification_index:
          $ref: '#/components/schemas/SubscriptionNotificationIndex'
        time_start:
          $ref: '#/components/schemas/Time'
        time_end:
          $ref: '#/components/schemas/Time'
        version:
          $ref: '#/components/schemas/Version'

    OperationReference:
      description: An OperationReference (area in which an Operation is being conducted,
        along with other high-level information, but no details).  The DSS reports
        only these references and clients must exchange details and additional information
        peer-to-peer.
      required:
      - id
      - owner
      - time_start
      - time_end
      - details_url
      - feedback_url
      - ovn
      type: object
      properties:
        id:
          $ref: '#/components/schemas/EntityUUID'
        owner:
          type: string
          example: '(uss_owner)'
          description: Created by the DSS and based on creating client’s ID (via access
            token).  Used for restricting mutation and deletion operations to owner.
        time_start:
          $ref: '#/components/schemas/Time'
        time_end:
          $ref: '#/components/schemas/Time'
        details_url:
          $ref: '#/components/schemas/OperationDetailsURL'
        feedback_url:
          $ref: '#/components/schemas/FeedbackURL'
        ovn:
          $ref: '#/components/schemas/EntityOVN'

    GetOperationReferenceResponse:
      description: Response to DSS request for the OperationReference with the given
        ID.
      required:
      - operation_reference
      type: object
      properties:
        operation_reference:
          $ref: '#/components/schemas/OperationReference'

    CreateOperationReferenceParameters:
      description: Parameters for a request to create an OperationReference in the
        DSS.
      required:
      - extents
      - key
      - details_url
      - feedback_url
      type: object
      properties:
        extents:
          $ref: '#/components/schemas/Volume4D'
        key:
          $ref: '#/components/schemas/Key'
        state:
          $ref: '#/components/schemas/OperationState'
        details_url:
          $ref: '#/components/schemas/OperationDetailsURL'
        feedback_url:
          $ref: '#/components/schemas/FeedbackURL'

    Operation:
      description: Full description of a UTM Operation.
      required:
      - reference
      - details
      type: object
      properties:
        reference:
          $ref: '#/components/schemas/OperationReference'
        details:
          $ref: '#/components/schemas/OperationDetails'

    OperationDetails:
      description: Details of a UTM Operation. Note that this data is not stored in the DSS; only with the clients.
      required:
      - volumes
      type: object
      properties:
        volumes:
          description: Volumes that wholly contain the Operation while being as small
            as practical.
          minItems: 1
          type: array
          items:
            $ref: '#/components/schemas/Volume4D'
        state:
          $ref: '#/components/schemas/OperationState'

    SearchOperationReferenceResponse:
      description: Response to DSS query for OperationReferences in an area of interest.
      required:
      - operation_references
      type: object
      properties:
        operation_references:
          description: OperationReferences in the area of interest.
          type: array
          items:
            $ref: '#/components/schemas/OperationReference'

    PostOperationNotificationParameters:
      description: Parameters of a message informing of new full information for an
        Operation.  Pushed (by a client, not the DSS) directly to clients with subscriptions
        when another client makes a change to airspace within a cell with a subscription.
      required:
      - subscriptions
      type: object
      properties:
        operation:
          $ref: '#/components/schemas/Operation'
        subscriptions:
          type: array
          description: Subscription(s) prompting this notification.
          items:
            $ref: '#/components/schemas/SubscriptionState'

    PutFeedbackParameters:
      description: Parameters of a message informing a USS of an error that the USS would otherwise not notice.
      required:
        - endpoint_url
        - response_code
        - problem
        - timestamp
      type: object
      properties:
        endpoint_url:
          type: string
          description: URL for request that resulted in an error.
        headers:
          description: Set of headers included in request that resulted in an error.
          type: array
          items:
            type: string
        body:
          description: Base64-encoded body content sent in request that resulted in an error.
          type: string
        response_code:
          type: integer
          format: int32
          description: HTTP response code encountered in error response.
        response_body:
          type: string
          description: Base64-encoded body content received in response that was in error.
        problem:
          type: string
          description: Human-readable description of the problem with the response.
        timestamp:
          $ref: '#/components/schemas/Time'

    CreateConstraintReferenceParameters:
      description: Parameters for a request to create/update a ConstraintReference in the
        DSS.
      required:
      - extents
      - details_url
      type: object
      properties:
        extents:
          $ref: '#/components/schemas/Volume4D'
        details_url:
          $ref: '#/components/schemas/ConstraintDetailsURL'
        feedback_url:
          $ref: '#/components/schemas/FeedbackURL'

    GetConstraintReferenceResponse:
      description: Response to DSS request for the ConstraintReference with the given
        ID.
      required:
      - constraint_reference
      type: object
      properties:
        constraint_reference:
          $ref: '#/components/schemas/ConstraintReference'

    ConstraintReference:
      description: A ConstraintReference (area in which a Constraint is present, along
        with other high-level information, but no details).  The DSS reports only
        these references and clients must exchange details and additional information
        peer-to-peer.
      required:
      - id
      - details_url
      - owner
      - time_start
      - time_end
      type: object
      properties:
        id:
          $ref: '#/components/schemas/EntityUUID'
        details_url:
          $ref: '#/components/schemas/ConstraintDetailsURL'
        feedback_url:
          $ref: '#/components/schemas/FeedbackURL'
        owner:
          description: Created by the DSS and based on creating client’s ID (via access
            token).  Used for restricting mutation and deletion transactions to the entity owner.
          type: string
          example: '(uss_owner)'
        time_start:
          $ref: '#/components/schemas/Time'
        time_end:
          $ref: '#/components/schemas/Time'
        ovn:
          $ref: '#/components/schemas/EntityOVN'

    PostConstraintNotificationParameters:
      description: Parameters of a message informing of new full information for a
        Constraint.  Pushed (by a client, not the DSS) directly to clients with subscriptions
        when another client makes a change to airspace within a cell with a subscription.
      required:
      - subscriptions
      type: object
      properties:
        constraint:
          $ref: '#/components/schemas/Constraint'
        subscriptions:
          description: Subscription(s) prompting this notification.
          type: array
          items:
            $ref: '#/components/schemas/SubscriptionState'

    Constraint:
      description: Full specification of a UTM Constraint.
      required:
      - reference
      - details
      type: object
      properties:
        reference:
          $ref: '#/components/schemas/ConstraintReference'
        details:
          $ref: '#/components/schemas/ConstraintDetails'

    ConstraintDetails:
      description: Details of a UTM Constraint. Note that this data is
        not stored in the DSS; only with the clients.
      required:
      - volumes
      type: object
      properties:
        volumes:
          description: Volumes that wholly contain the Constraint while being as small
            as practical.
          minItems: 1
          type: array
          items:
            $ref: '#/components/schemas/Volume4D'
        exempt_operations:
          description: List of Operation UUIDs exempt from this Constraint, if applicable.
          type: array
          items:
            $ref: '#/components/schemas/EntityUUID'
        previous_operation:
          description: Operation UUID that created this Constraint, if applicable.
          type: string
          items:
            $ref: '#/components/schemas/EntityUUID'

    ChangeConstraintReferenceResponse:
      description: Response to a request to create, update, or delete a ConstraintReference.
        in the DSS.
      required:
      - subscribers
      type: object
      properties:
        subscribers:
          description: DSS subscribers that this client now has the obligation to
            notify of the Constraint changes just made.  This client must call POST
            for each provided URL according to the `/uss/constraints/{id}` path API.
          type: array
          items:
            $ref: '#/components/schemas/SubscriberToNotify'
        constraint_reference:
          $ref: '#/components/schemas/ConstraintReference'

    ChangeOperationReferenceResponse:
      description: Response to a request to create, update, or delete an OperationReference
        in the DSS.
      required:
      - subscribers
      type: object
      properties:
        subscribers:
          description: DSS subscribers that this client now has the obligation to
            notify of the Operation changes just made.  This client must call POST
            for each provided URL according to the `/uss/operations/{id}` path API.
          type: array
          items:
            $ref: '#/components/schemas/SubscriberToNotify'
        operation_reference:
          $ref: '#/components/schemas/OperationReference'

    SearchConstraintReferencesResponse:
      description: Response to DSS query for ConstraintReferences in an area of interest.
      required:
      - constraint_references
      type: object
      properties:
        constraint_references:
          description: ConstraintReferences in the area of interest.
          type: array
          items:
            $ref: '#/components/schemas/ConstraintReference'

    EntityReference:
      description: Reference to a generic Entity known to the DSS.
      type: object
      properties:
        operation_reference:
          $ref: '#/components/schemas/OperationReference'
        constraint_reference:
          $ref: '#/components/schemas/ConstraintReference'

    GetConstraintResponse:
      description: Response to peer request for the details of Operation with the
        given ID.
      required:
      - constraint
      type: object
      properties:
        constraint:
          $ref: '#/components/schemas/Constraint'

    GetOperationResponse:
      description: Response to peer request for the details of Operation with the given ID.
      required:
      - operation
      type: object
      properties:
        operation:
          $ref: '#/components/schemas/Operation'

    SubscriptionCallbacks:
      description: Endpoints that should be called when an applicable event occurs.  At
        least one field must be specified.
      type: object
      properties:
        operation_url:
          $ref: '#/components/schemas/OperationDetailsURL'
        constraint_url:
          $ref: '#/components/schemas/ConstraintDetailsURL'

    OperationDetailsURL:
      description: |-
        The URL at which the details of an Operation may be retrieved.  See `/uss/operations/{id}` path for specification of this endpoint.  This URL is the base Operations resource.  If this URL is specified as https://my_utm_uss.com/operations then the details for a particular {id} may be obtained at the URL https://my_utm_uss.com/operations/{id}.  This URL may not have a trailing / character.
      type: string
      example: 'https://my_utm_uss.com/operations'

    ConstraintDetailsURL:
      description: |-
        The URL at which the details of a Constraint may be retrieved.  See `/uss/constraints/{id}` path for specification of this endpoint.
        This URL is the base Constraints resource.  If this URL is specified as https://my_utm_uss.com/constraints then the details for a particular {id} may be obtained at the URL https://my_utm_uss.com/constraints/{id}.  This URL may not have a trailing / character.
      type: string
      example: 'https://my_utm_uss.com/constraints'

    FeedbackURL:
      description: |-
        The URL at which feedback may be submitted.  See `/uss/feedback/{id}` path for specification of this endpoint.
        This URL is the base Feedback resource.  If this URL is specified as https://my_utm_uss.com/feedback then feedback with {id} may be submitted at the URL https://my_utm_uss.com/feedback/{id}.  This URL may not have a trailing / character.
      type: string
      example: 'https://my_utm_uss.com/feedback'

    AirspaceConflictResponse:
      description: Data provided when an airspace conflict was encountered.
      type: object
      properties:
        message:
          description: Human-readable message indicating what error occurred and/or
            why.
          type: string
        entity_conflicts:
          description: List of Entity references for which current proof of knowledge
            was not provided.  If this field is present and contains elements, the
            calling USS should query the details URLs for these Entities to obtain
            their details and correct OVNs.  The OVNs can be used to update
            the key, at which point the USS may retry this call.
          type: array
          items:
            $ref: '#/components/schemas/EntityReference'

    OperationState:
      description: |-
        State of an Operation.

        'ACCEPTED': This Operation was fully deconflicted from other Entities at the time it changed to this state, but no  aircraft associated with it are active yet.

        'ACTIVATED': One or more aircraft associated with this Operation are, or will imminently be, in flight.

        'NON_CONFORMING': This Operation is outside of the planned volume. A new volume MUST be submitted to the DSS.

        'CONTINGENCY': (Also known as ROGUE). This Operation has been NON_CONFORMING for a certain period of time. This state must transition to ENDED. A new volume MUST be submitted to the DSS.

        'ENDED': This Operation has ended (due to either an Operator-induced change or flight completion).
      type: string
      enum:
        - ACCEPTED
        - ACTIVATED
        - NON_CONFORMING
        - CONTINGENCY
        - ENDED

paths:

  #
  # USS Endpoint: OPERATIONS
  #

  /v1/uss-utm/operations/{id}:
    summary: Push/Query detailed information of an Operation.
    parameters:
    - name: id
      description: EntityUUID for this Operation (matches Operation identifier).
      schema:
        $ref: '#/components/schemas/EntityUUID'
      in: path
      required: true

    get:
      tags:
      - "Operations"
      security:
      - Authority:
        - utm.read.operations
      summary: Retrieve the specified Operation (details).
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetOperationResponse'
          description: The full Operation information was retrieved successfully.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: One or more input parameters were missing or invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bearer access token was not provided in Authorization header,
            token could not be decoded, or token was invalid.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The access token was decoded successfully but did not include
            a scope appropriate to this endpoint.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The requested Entity could not be found.

    post:
      tags:
      - "Operations"
      security:
      - Authority:
        - utm.write.operations
      summary: Push the specified Operation (details) to peer USS.
      description: Push details of an Operation directly to a peer USS (usually because interaction with a DSS triggered this action).
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostOperationNotificationParameters'
        required: true
      responses:
        "204":
          description: New or updated full Operation information received successfully.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: |-
            * One or more parameters were missing or invalid.
            * The Entity could not be parsed, or contains illegal data.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bearer access token was not provided in Authorization header,
            token could not be decoded, or token was invalid.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: |-
            * The access token was decoded successfully but did not include a scope appropriate to this endpoint.
            * The client identified in the access token is not the owner of this Entity according to the receiving client's records.
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The Entity version specified in this message is lower than
            a previously-received notification, or identical to a previously-received
            notification and the Entity is different.

  #
  # USS Endpoint: CONSTRAINTS
  #

  /v1/uss-utm/constraints/{id}:
    summary: Push/Query detailed information of a Constraint.
    parameters:
    - name: id
      description: EntityUUID of the Constraint.
      schema:
        $ref: '#/components/schemas/EntityUUID'
      in: path
      required: true

    get:
      tags:
      - "Constraints"
      security:
      - Authority:
        - utm.read.constraints
      summary: Retrieve the specified Constraint (details).
      description: Retrieve the full details of a Constraint (from the entity owner).
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetConstraintResponse'
          description: The full Constraint information was retrieved successfully.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: One or more input parameters were missing or invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bearer access token was not provided in Authorization header,
            token could not be decoded, or token was invalid.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The access token was decoded successfully but did not include
            a scope appropriate to this endpoint.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The requested Entity could not be found.

    post:
      tags:
      - "Constraints"
      security:
      - Authority:
        - utm.write.constraints
      summary: Push the specified Constraint (details) to peer USS.
      description: Publish new information about a Constraint to the host of this
        endpoint (usually because of instructions from the DSS triggered by a subscription).
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostConstraintNotificationParameters'
        required: true
      responses:
        "204":
          description: New or updated full Constraint information received successfully.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: |-
            * One or more parameters were missing or invalid.
            * The Entity could not be parsed, or contains illegal data.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bearer access token was not provided in Authorization header,
            token could not be decoded, or token was invalid.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: |-
            * The access token was decoded successfully but did not include a scope appropriate to this endpoint.
            * The client identified in the access token is not the owner of this Entity according to the receiving client's records.
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The Entity version specified in this message is lower than
            a previously-received notification, or identical to a previously-received
            notification and the Entity is different.

  #
  # USS Endpoint: (OTHER)
  #

  /v1/uss-utm/feedback/{id}:
    summary: Endpoint to provide feedback (errors, etc.) that might otherwise go unnoticed by this USS.
    parameters:
     - name: id
       description: ID of the feedback.
       schema:
         $ref: '#/components/schemas/UUIDv4'
       in: path
       required: true

    post:
      tags:
        - "Feedback"
      security:
        - Authority:
          - utm.read.operations
          - utm.write.operations
          - utm.read.constraints
          - utm.write.constraints
      summary: Provide feedback (text) directly to peer UUS.
      description: Notify USS of an error encountered that might otherwise go unnoticed.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutFeedbackParameters'
        required: true
      responses:
        "201":
          description: Feedback received successfully and archived.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeedbackURL'
          description: |-
            * One or more parameters were missing or invalid.
            * The feedback could not be parsed, or contains unrecognized data.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: |-
            Bearer access token was not provided in Authorization header,
            token could not be decoded, or token was invalid.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: |-
            * The access token was decoded successfully but did not include a scope appropriate to this endpoint.
