---
openapi: 3.0.2
info:
  title: UTM USS<->USS API
  version: 0.1.2
  description: |-
    Interface definitions for data exchange between UAS Service Suppliers (USS).

    Used by participating UTM clients (USSs) to share information about UAS operations.

    Note: Unless otherwise specified, fields specified in a message but not declared in the API shall be ignored.

security:
- Authority:
  - utm.read.operations
  - utm.write.operations
  - utm.read.constraints
  - utm.write.constraints

tags:
- name: "Operations"
  description: |-
    Endpoints exposed by each participating UTM USS for exchange of Operations data.
- name: "Constraints"
  description: |-
    Endpoints exposed by each participating UTM USS for exchange of Constraints data.
- name: "Reports"
  description: |-
    Endpoints exposed by each participating UTM USS for providing feedback.

#
#
#

components:
  securitySchemes:
    Authority:
      type: oauth2
      flows:
        clientCredentials:
          tokenUrl: https://token_vendor.com/oauth/token
          scopes:
            utm.read.operations: |-
              Client may read Operations (details) from a peer USS.
            utm.write.operations: |-
              Client may send their own Operations (details) to a peer USS.
            utm.read.constraints: |-
              Client may read Constraints (details) from a peer USS.
            utm.write.constraints: |-
              Client may send their own Constraints (details) to a peer USS.
      description: |-
        Authorization from, or on behalf of, an authorization authority.  This authority shall issue access tokens that are JSON Web Tokens as defined in RFC 7519, using the `RS256` algorithm for the signature, and publish to all providers the public key for verifying that signature.

        The following fields shall be included in the JWT claim for access tokens issued by this authority:
            * `iss`, with the URL at which the token generation request was received.
            * `exp`, with a time no further than 1 hour in the future.
            * `sub`, with unique ID of the client requesting the access token.
            * `scope`, with an array of strings indicating the scopes granted.

        Multiple scopes for a single token shall be granted if requested.  The tokens granted by this authority shall protect against reuse of received tokens to impersonate the sender to other recipients (via use of the `aud` claim or other means).

        Clients shall provide these access tokens in an `Authorization` header in the form `Bearer <token>` in accordance with RFC 6750.


  schemas:
    UUIDv4:
      description: |-
        Universally-unique identifier (version 4).
      maxLength: 36
      minLength: 36
      type: string
      format: uuid
      pattern: >-
        "^[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-4[0-9a-fA-F]{3}\\-[8-b][0-9a-fA-F]{3}\\-[0-9a-fA-F]{12}$"
      example: '03e5572a-f733-49af-bc14-8a18bd53ee39'

    EntityUUID:
      $ref: '#/components/schemas/UUIDv4'

    EntityOVN:
      title: EntityOVN
      description: |-
        A token associated with a particular UTM Entity+version created
        by the DSS upon creation or modification of an Entity reference and provided
        to the client creating or modifying the Entity reference.  The EntityOVN
        is stored privately by the DSS and then compared against entries in a Key
        provided to mutate the airspace.  The EntityOVN is also provided by
        the client whenever that client transmits the full information of the Entity
        (either via GET, or via a subscription notification).
      required:
      - token
      - version
      type: object
      properties:
        version:
          format: int32
          description: This version increases each time an Entity is modified.  If
            a client ever receives a subscription update with an EntityOVN for
            a particular EntityUUID that is smaller than the cached EntityOVN
            for that EntityUUID, that subscription update should be ignored.
          type: integer
        token:
          $ref: '#/components/schemas/UUIDv4'

    Time:
      type: string
      format: date-time
      example: '1985-04-12T23:20:50.52Z'

    TimeWithUnits:
      required:
      - time
      - units
      type: object
      properties:
        time:
          $ref: '#/components/schemas/Time'
        units:
          type: string
          enum:
          - RFC3339

    Radius:
      format: float
      description: Distance, in meters, from the centerpoint of a circular area.
      type: number
      example: 300.183

    RadiusWithUnits:
      required:
      - radius
      - units
      type: object
      properties:
        radius:
          $ref: '#/components/schemas/Radius'
        units:
          type: string
          enum:
          - Meters

    Altitude:
      format: float
      description: An altitude, in meters, above the WGS84 ellipsoid.
      type: number
      example: 19.5

    AltitudeWithUnits:
      required:
      - altitude
      - units
      type: object
      properties:
        altitude:
          $ref: '#/components/schemas/Altitude'
        units:
          type: string
          enum:
          - Meters_WGS84

    Velocity:
      format: float
      description: Speed in meters/second.
      type: number
      example: 200.1

    VelocityWithUnits:
      required:
      - velocity
      - units
      type: object
      properties:
        velocity:
          $ref: '#/components/schemas/Velocity'
        units:
          type: string
          enum:
          - MetersSecond

    Latitude:
      description: Degrees of latitude north of the equator, with reference to the WGS84 ellipsoid.
      maximum: 90
      exclusiveMaximum: false
      minimum: -90
      exclusiveMinimum: false
      type: number
      format: double
      example: 34.123

    Longitude:
      description: Degrees of longitude east of the Prime Meridian, with reference to the WGS84 ellipsoid.
      maximum: -180
      exclusiveMaximum: false
      minimum: 180
      exclusiveMinimum: false
      type: number
      format: double
      example: -118.456
    
    LonLatPair:
      description: Longitude/Latitude pair (in that order) used for specifying geographical vertex. Specified as an array. Order is important!
      type: array
      maxItems: 2
      minItems: 2
      items:
        oneOf:
          - $ref: '#/components/schemas/Longitude'
          - $ref: '#/components/schemas/Latitude'
      example: [-122.106325, 47.660898]

#
# GeoJSON definitions
#

# Original version: https://gist.github.com/bubbobne/fe5f2db65acf039be6a9fd92fc9c7233
# Edits by joseph.rios@nasa.gov

#MIT License
#Copyright (c) 2017 Daniele Andreis
#Permission is hereby granted, free of charge, to any person obtaining a copy
#of this software and associated documentation files (the "Software"), to deal
#in the Software without restriction, including without limitation the rights
#to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
#copies of the Software, and to permit persons to whom the Software is
#furnished to do so, subject to the following conditions:
#
#
#The above copyright notice and this permission notice shall be included in all
#copies or substantial portions of the Software.
#
#THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
#AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
#LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
#OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
#SOFTWARE.

    Point:
      type: object
      description: GeoJSon Point, limited to 2D.
      externalDocs:
        url: https://tools.ietf.org/html/rfc7946#section-3.1.2
      properties:
        type:
          description: The type of Geometry. In this case, must be 'Point' per GeoJSON spec.
          type: string
          enum:
          - Point
        coordinates:
          $ref: '#/components/schemas/LonLatPair'

    Polygon:
      type: object
      required:
        - type
        - coordinates
      description: GeoJSon Polygon. Positions all 2D.
      externalDocs:
        url: https://tools.ietf.org/html/rfc7946#section-3.1.6
      properties:
        type:
          description: |
            The type of Geometry. In this case, must be 'Polygon' per GeoJSON
            spec.  Note that the "coordinates" member is validated to be be an
            array of size one. This implies there are no interior rings allowed
            currently.
          type: string
          enum:
          - Polygon
        coordinates:
          type: array
          description: >-
            The number of polygons allowed.  Currently 1, implying no interior
            rings.  If this number is changes, the maxItems should be considered.
            From RFC7946:
            o  For type "Polygon", the "coordinates" member MUST be an array of
            linear ring coordinate arrays.
            o  For Polygons with more than one of these rings, the first MUST be
            the exterior ring, and any others MUST be interior rings.  The
            exterior ring bounds the surface, and the interior rings (if
            present) bound holes within the surface.
            Again, note we only allow a single set of coordinates, implying no
            interior rings.
          minItems: 1
          maxItems: 1
          items:
            type: array
            description: >-
              The number of vertices in this polygon. From RFC7946:
                o  A linear ring is a closed LineString with four or more positions.
                o  The first and last positions are equivalent, and they MUST contain
                identical values; their representation SHOULD also be identical.
                o  A linear ring is the boundary of a surface or the boundary of a
                hole in a surface.
                o  A linear ring MUST follow the right-hand rule with respect to the
                area it bounds, i.e., exterior rings are counterclockwise, and
                holes are clockwise.  (also in the spec:  parsers SHOULD NOT reject
                Polygons that do not follow the right-hand rule.)
                https://tools.ietf.org/html/rfc7946#section-3.1.6
            minItems: 4
            maxItems: 100
            items:
              $ref: '#/components/schemas/Point'

    Circle:
      description: |-
        Local extension of the GeoJSON specification to add a circular area defined by a Point/Radius pair. We extend the Properties object to include a 'radius' and 'radius_units' value (see RadiusWithUnits for details).
      required:
        - type
        - geometry
        - properties
      type: object
      properties:
        type:
          description: The type of Geometry. In this case, must be 'Feature' per GeoJSON spec.
          type: string
          enum:
          - Feature
        geometry:
          type: object
          properties:
            type:
              description: The type of Geometry. Must be Point.
              type: string
              enum:
              - Point
            coordinates:
              $ref: '#/components/schemas/Point'
        properties:
          $ref: '#/components/schemas/RadiusWithUnits'

    VehicleTelemetry:
      description: Vehicle position, altitude, and velocity.
      required:
      - position
      - position_uncertainty
      - altitude
      - velocity
      - time_measured
      type: object
      properties:
        position:
          $ref: '#/components/schemas/Point'
        altitude:
          $ref: '#/components/schemas/AltitudeWithUnits'
        velocity:
          $ref: '#/components/schemas/VelocityWithUnits'
        time_measured:
          $ref: '#/components/schemas/TimeWithUnits'

    Volume3D:
      description: |-
         A three-dimensional geographic volume consisting of a vertically-extruded polygon.
      required:
      - area
      - altitude_lower
      - altitude_upper
      type: object
      properties:
        area:
          oneOf:
          - $ref: '#/components/schemas/Polygon'
          - $ref: '#/components/schemas/Circle'
          description: A geographic shape on the surface of the earth.
          example:
            type: 'Feature'
            properties:
              radius: 300.0
              radius_units: 'METERS_WGS84'
            geometry:
              type: 'Point'
              coordinates: [-121.0123, 156.789]
        altitude_lower:
          $ref: '#/components/schemas/AltitudeWithUnits'
        altitude_upper:
          $ref: '#/components/schemas/AltitudeWithUnits'

    Volume4D:
      description: Contiguous block of geographic spacetime.
      required:
      - volume
      type: object
      properties:
        volume:
          $ref: '#/components/schemas/Volume3D'
        time_start:
          $ref: '#/components/schemas/TimeWithUnits'
        time_end:
          $ref: '#/components/schemas/TimeWithUnits'

 
    SubscriptionNotificationIndex:
      format: int32
      description: |-
        Tracks the notifications sent for a subscription so the subscriber
        can detect missed notifications more easily.
      type: integer

    SubscriptionState:
      description: |-
        State of Subscription which is causing a notification to be sent.
      required:
      - subscription
      type: object
      properties:
        subscription_id:
          $ref: '#/components/schemas/UUIDv4'
        notification_index:
          $ref: '#/components/schemas/SubscriptionNotificationIndex'


    ErrorResponse:
      description: Data provided when an off-nominal condition was encountered.
      type: object
      properties:
        message:
          description: |-
            Human-readable message indicating what error occurred and/or why.
          type: string


    ReportURL:
      description: |-
        The base URL (protocol://hostname/path) where USS Reports are received. This URL may not have a trailing '/' character.
        The path `/v1/reports/{id}` will be appended to this string to form the complete URL.
        (See `POST /v1/reports/{id}` for more information.)
      type: string
      example: 'https://uss.com/utm'

    OperationState:
      description: |-
        State of an Operation.

        'Accepted': This Operation was fully deconflicted from other Entities at the time it changed to this state, but no  aircraft associated with it are active yet.

        'Activated': One or more aircraft associated with this Operation are, or will imminently be, in flight.

        'NonConforming': This Operation is outside of the planned volume.  A new volume MUST be submitted to the DSS.  In this state, the {query-operation-details}/{id}/telemetry' endpoint MUST respond (if possible) to queries from USS peers.

        'Contingent': (Also known as ROGUE). This Operation has been NON-CONFORMING for a certain period of time.  This state must transition to ENDED. A new volume MUST be submitted to the DSS.  In this state, the {query-operation-details}/{id}/telemetry' endpoint MUST respond (if possible) to queries from USS peers.

        'Ended': This Operation has ended (due to either an Operator-induced change or flight completion).
      type: string
      enum:
        - Accepted
        - Activated
        - NonConforming
        - Contingent
        - Ended

    QueryOperationDetailsURL:
      description: |-
        The base URL (protocol://hostname/path) where USS Operation data is retrieved. This URL may not have a trailing '/' character.
        The path `/v1/operations/{id}` will be appended to this string to form the complete URL.
        (See `GET /v1/operations/`, `GET /v1/operations/{id}`, and `GET /v1/operations/{id}/telemetry` for more information.)
      type: string
      example: 'https://uss.com/utm'

    NotifyOperationDetailsURL:
      description: |-
        The base URL (protocol://hostname/path) where USS Operation data is received. This URL may not have a trailing '/' character.
        The path `/v1/operations/{id}` will be appended to this string to form the complete URL.
        (See `PUT /v1/operations/{id}` and `DELETE /v1/operations/{id}` for more information.)
      type: string
      example: 'https://uss.com/utm'

    OperationCallbacks:
      description: |-
        Endpoints that should be called when an applicable event occurs.
        All fields are required.
      required:
      - query_details_url
      - report_url
      type: object
      properties:
        query_details_url:
          $ref: '#/components/schemas/QueryOperationDetailsURL'
        report_url:
          $ref: '#/components/schemas/ReportURL'

    OperationReference:
      description: |-
        The high-level information of a planned/active Operation with the URL
        of a USS to query for details.  Note: 'OVN' is returned ONLY to the USS that
        created the Operation but NEVER to other USS instances.
      required:
      - id
      - time_start
      - time_end
      - callbacks
      type: object
      properties:
        id:
          $ref: '#/components/schemas/EntityUUID'
        ovn:
          $ref: '#/components/schemas/EntityOVN'
        owner:
          type: string
          example: '(uss_owner)'
          description: |-
            Created by the DSS and based on creating client’s ID (via access
            token).  Used for restricting mutation and deletion operations to owner.
        time_start:
          $ref: '#/components/schemas/TimeWithUnits'
        time_end:
          $ref: '#/components/schemas/TimeWithUnits'
        callbacks:
          $ref: '#/components/schemas/OperationCallbacks'
        subscription_id:
          $ref: '#/components/schemas/EntityUUID'

    OperationDetails:
      description: |-
        Details of a UTM Operation. Note that this data is not stored in the DSS; only with the clients.
      required:
      - volumes
      type: object
      properties:
        volumes:
          description: Volumes that wholly contain the Operation while being as small
            as practical.
          minItems: 1
          type: array
          items:
            $ref: '#/components/schemas/Volume4D'
        state:
          $ref: '#/components/schemas/OperationState'

    Operation:
      description: Full description of a UTM Operation.
      required:
      - reference
      - details
      type: object
      properties:
        reference:
          $ref: '#/components/schemas/OperationReference'
        details:
          $ref: '#/components/schemas/OperationDetails'

    PutOperationDetailsParameters:
      description: |-
        Parameters of a message informing of detailed information for a peer Operation.
        Pushed (by a client, not the DSS) directly to clients with subscriptions when
        another client makes a change to airspace within a cell with a subscription.
      required:
      - subscriptions
      type: object
      properties:
        operation:
          $ref: '#/components/schemas/Operation'
        subscriptions:
          type: array
          description: Subscription(s) prompting this notification.
          items:
            $ref: '#/components/schemas/SubscriptionState'

    GetOperationDetailsResponse:
      description: Response to peer request for the details of Operation with the given ID.
      required:
      - operation
      type: object
      properties:
        operation:
          $ref: '#/components/schemas/Operation'

    GetOperationTelemetryResponse:
      description: Response to a peer request for telemetry of an off-nominal Operation.
      required:
      - telemetry
      type: object
      properties:
        telemetry:
          $ref: '#/components/schemas/VehicleTelemetry'


    QueryConstraintDetailsURL:
      description: |-
        The base URL (protocol://hostname/path) where USS Constraint data is retrieved. This URL may not have a trailing '/' character.
        The path `/v1/constraints/{id}` will be appended to this string to form the complete URL.
        (See `GET /v1/constraints/` and `GET /v1/constraints/{id}` for more information.)
      type: string
      example: 'https://uss.com/utm'

    NotifyConstraintDetailsURL:
      description: |-
        The base URL (protocol://hostname/path) where USS Constraint data is received. This URL may not have a trailing '/' character.
        The path `/v1/constraints/{id}` will be appended to this string to form the complete URL.
        (See `PUT /v1/constraints/{id}` and `DELETE /v1/constraints/{id}` for more information.)
      type: string
      example: 'https://uss.com/utm'

    ConstraintCallbacks:
      description: |-
        Endpoints that should be called when an applicable event occurs.
      required:
      - query_details_url
      - report_url
      type: object
      properties:
        query_details_url:
          $ref: '#/components/schemas/QueryConstraintDetailsURL'
        report_url:
          $ref: '#/components/schemas/ReportURL'

    ConstraintReference:
      description: A ConstraintReference (area in which a Constraint is present, along
        with other high-level information, but no details).  The DSS reports only
        these references and clients must exchange details and additional information
        peer-to-peer.
      required:
      - id
      - owner
      - time_start
      - time_end
      - callbacks
      type: object
      properties:
        id:
          $ref: '#/components/schemas/EntityUUID'
        owner:
          description: Created by the DSS and based on creating client’s ID (via access
            token).  Used for restricting mutation and deletion transactions to the entity owner.
          type: string
          example: '(uss_owner)'
        time_start:
          $ref: '#/components/schemas/TimeWithUnits'
        time_end:
          $ref: '#/components/schemas/TimeWithUnits'
        callbacks:
          $ref: '#/components/schemas/ConstraintCallbacks'


    ConstraintDetails:
      description: Details of a UTM Constraint. Note that this data is
        not stored in the DSS; only with the clients.
      required:
      - volumes
      type: object
      properties:
        volumes:
          description: Volumes that wholly contain the Constraint while being as small
            as practical.
          minItems: 1
          type: array
          items:
            $ref: '#/components/schemas/Volume4D'

    Constraint:
      description: Full specification of a UTM Constraint.
      required:
      - reference
      - details
      type: object
      properties:
        reference:
          $ref: '#/components/schemas/ConstraintReference'
        details:
          $ref: '#/components/schemas/ConstraintDetails'

    PutConstraintDetailsParameters:
      description: Parameters of a message informing of new full information for a
        Constraint.  Pushed (by a client, not the DSS) directly to clients with subscriptions
        when another client makes a change to airspace within a cell with a subscription.
      required:
      - subscriptions
      type: object
      properties:
        constraint:
          $ref: '#/components/schemas/Constraint'
        subscriptions:
          description: Subscription(s) prompting this notification.
          type: array
          items:
            $ref: '#/components/schemas/SubscriptionState'

    GetConstraintDetailsResponse:
      description: Response to peer request for the details of Operation with the
        given ID.
      required:
      - constraint
      type: object
      properties:
        constraint:
          $ref: '#/components/schemas/Constraint'


    PostReportParameters:
      description: |-
        Parameters of a message informing a USS of an error that the USS might
        otherwise not notice.
      required:
        - url_endpoint
        - response_code
        - problem
        - timestamp
      type: object
      properties:
        url_endpoint:
          type: string
          description: URL for request that resulted in an error.
        headers:
          description: Set of headers included in request that resulted in an error.
          type: array
          items:
            type: string
        body:
          description: Base64-encoded body content sent in request that resulted in an error.
          type: string
        response_code:
          type: integer
          format: int32
          description: HTTP response code encountered in error response.
        response_body:
          type: string
          description: Base64-encoded body content received in response that was in error.
        problem:
          type: string
          description: Human-readable description of the problem with the response.
        timestamp:
          $ref: '#/components/schemas/TimeWithUnits'


paths:

  #
  # USS Endpoint: OPERATIONS
  #

  /v1/operations/{id}:
    summary: Query detailed information of an Operation.
    parameters:
    - name: id
      description: EntityUUID for this Operation (matches Operation identifier).
      schema:
        $ref: '#/components/schemas/EntityUUID'
      in: path
      required: true

    get:
      tags:
      - "Operations"
      security:
      - Authority:
        - utm.read.operations
      summary: Retrieve the specified Operation (details).
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetOperationDetailsResponse'
          description: Operation details were retrieved successfully.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: One or more input parameters were missing or invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bearer access token was not provided in Authorization header,
            token could not be decoded, or token was invalid.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The access token was decoded successfully but did not include
            a scope appropriate to this endpoint.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The requested Entity could not be found.

    put:
      tags:
      - "Operations"
      security:
      - Authority:
        - utm.write.operations
      summary: Receive the specified Operation (details) from a peer USS.
      description: Receive details of an Operation directly from a peer USS (usually as a requirement of previous interactions with the DSS).
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutOperationDetailsParameters'
        required: true
      responses:
        "204":
          description: New or updated full Operation information received successfully.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: |-
            * One or more parameters were missing or invalid.
            * The Entity could not be parsed, or contains illegal data.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: |-
            Bearer access token was not provided in Authorization header, token could not be decoded, or token was invalid.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: |-
            * The access token was decoded successfully but did not include a scope appropriate to this endpoint.
            * The client identified in the access token is not the owner of this Entity according to the receiving client's records.
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: |-
            The Entity version specified in this message is lower than
            a previously-received notification, or identical to a previously-received
            notification and the Entity is different.

    delete:
      tags:
      - "Operations"
      security:
      - Authority:
        - utm.write.operations
      summary: Request deletion of the specified Operation by a peer USS.
      description: Receive a request to remove an Operation from a peer USS (usually as a requirement of previous interactions with the DSS).  The peer USS should be the same that created this entity.
      responses:
        "200":
          description: Operation deleted successfully.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: |-
            * One or more parameters were missing or invalid.
            * The Entity could not be parsed, or contains illegal data.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: |-
            Bearer access token was not provided in Authorization header, token could not be decoded, or token was invalid.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: |-
            * The access token was decoded successfully but did not include a scope appropriate to this endpoint.
            * The client identified in the access token is not the owner of this Entity according to the receiving client's records.
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: |-
            The Entity version specified in this message is lower than
            a previously-received notification, or identical to a previously-received
            notification and the Entity is different.

  /v1/operations/{id}/telemetry:
    summary: Query detailed information on the position of an off-nominal Operation.
    parameters:
    - name: id
      description: EntityUUID for this Operation (matches Operation identifier).
      schema:
        $ref: '#/components/schemas/EntityUUID'
      in: path
      required: true

    get:
      tags:
      - "Operations"
      security:
      - Authority:
        - utm.read.operations
      summary: Query detailed information on the position of an off-nominal Operation.
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetOperationTelemetryResponse'
          description: Operation telemetry details were retrieved successfully.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: One or more input parameters were missing or invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bearer access token was not provided in Authorization header, token could not be decoded, or token was invalid.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The access token was decoded successfully but did not include a scope appropriate to this endpoint.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The requested Entity could not be found.

  #
  # USS Endpoint: CONSTRAINTS
  #

  /v1/constraints/{id}:
    summary: Query detailed information of a Constraint.
    parameters:
    - name: id
      description: EntityUUID of the Constraint.
      schema:
        $ref: '#/components/schemas/EntityUUID'
      in: path
      required: true

    get:
      tags:
      - "Constraints"
      security:
      - Authority:
        - utm.read.constraints
      summary: Retrieve the specified Constraint (details).
      description: Retrieve the details of the specified Constraint.
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetConstraintDetailsResponse'
          description: Constraint details were retrieved successfully.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: One or more input parameters were missing or invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bearer access token was not provided in Authorization header,
            token could not be decoded, or token was invalid.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The access token was decoded successfully but did not include
            a scope appropriate to this endpoint.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The requested Entity could not be found.

    put:
      tags:
      - "Constraints"
      security:
      - Authority:
        - utm.write.constraints
      summary: Receive the specified Constraint (details) directly from a peer USS.
      description: |-
        Publish new information about a Constraint to the host of this
        endpoint (usually as a requirement of previous interactions with the DSS).
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutConstraintDetailsParameters'
        required: true
      responses:
        "204":
          description: New or updated full Constraint information received successfully.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: |-
            * One or more parameters were missing or invalid.
            * The Entity could not be parsed, or contains illegal data.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bearer access token was not provided in Authorization header,
            token could not be decoded, or token was invalid.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: |-
            * The access token was decoded successfully but did not include a scope appropriate to this endpoint.
            * The client identified in the access token is not the owner of this Entity according to the receiving client's records.
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The Entity version specified in this message is lower than
            a previously-received notification, or identical to a previously-received
            notification and the Entity is different.

    delete:
      tags:
      - "Constraints"
      security:
      - Authority:
        - utm.write.constraints
      summary: Request deletion of the specified Constraint by a peer USS.
      description: Receive a request to remove a Constraint from a peer USS (usually as a requirement of previous interactions with the DSS).  The peer USS should be the same that created this entity.
      responses:
        "200":
          description: Constraint deleted successfully.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: |-
            * One or more parameters were missing or invalid.
            * The Entity could not be parsed, or contains illegal data.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bearer access token was not provided in Authorization header,
            token could not be decoded, or token was invalid.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: |-
            * The access token was decoded successfully but did not include a scope appropriate to this endpoint.
            * The client identified in the access token is not the owner of this Entity according to the receiving client's records.
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The Entity version specified in this message is lower than
            a previously-received notification, or identical to a previously-received
            notification and the Entity is different.

  #
  # USS Endpoint: (OTHER)
  #

  /v1/reports/{id}:
    summary: Endpoint to provide feedback (errors, etc.) that might otherwise go unnoticed by this USS.  This endpoint is used for all feedback related to Operations and Constraints. Note that {id} is generated by the sender.
    parameters:
    - name: id
      description: ID of the report. Generated by the sender.
      schema:
        $ref: '#/components/schemas/UUIDv4'
      in: path
      required: true

    post:
      tags:
        - "Reports"
      security:
        - Authority:
          - utm.read.operations
          - utm.write.operations
          - utm.read.constraints
          - utm.write.constraints
      summary: Receive feedback (human-readable text) directly from a peer UUS.
      description: Notify USS of an error encountered that might otherwise go unnoticed.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostReportParameters'
        required: true
      responses:
        "201":
          description: Report received and successfully archived.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReportURL'
          description: |-
            * One or more parameters were missing or invalid.
            * The report could not be parsed, or contains unrecognized data.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: |-
            Bearer access token was not provided in Authorization header,
            token could not be decoded, or token was invalid.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: |-
            * The access token was decoded successfully but did not include a scope appropriate to this endpoint.
