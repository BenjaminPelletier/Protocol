---
openapi: 3.0.2
info:
  title: UTM USS->DSS API
  version: 0.0.5
  description: |-
    Interface definitions for 'Discovery and Synchronization Service' (DSS).

    Used for identification of peer UTM USS instances (managing flight operations and constraints).

    Note: Unless otherwise specified, fields specified in a message but not declared in the API shall be ignored.

security:
- Authority:
  - utm.read.operations
  - utm.write.operations
  - utm.read.constraints
  - utm.write.constraints
  - utm.read.subscriptions
  - utm.write.subscriptions

tags:
- name: "Operations"
  description: |-
    Endpoints exposed by the DSS for interaction with Operation entities.
- name: "Constraints"
  description: |-
    Endpoints exposed by the DSS for interaction with Constraint entities.
- name: "Subscriptions"
  description: |-
    Endpoints exposed by the DSS for interaction with Subscription entities.

#
#
#

components:
  securitySchemes:
    Authority:
      type: oauth2
      flows:
        clientCredentials:
          tokenUrl: https://token_vendor.com/oauth/token
          scopes:
            utm.read.operations: |-
              Client may read Operations (references) from the DSS.
            utm.write.operations: |-
              Client may create, edit, and delete (their own) Operations.
            utm.read.constraints: |-
              Client may read Constraints (references) from the DSS.
            utm.write.constraints: |-
              Client may create, edit, and delete (their own) Constraints.
            utm.read.subscriptions: |-
              Client may read (their own) Subscriptions (references) from the DSS.
            utm.write.subscriptions: |-
              Client may create, edit, and delete (their own) Subscriptions.
      description: |-
        Authorization from, or on behalf of, an authorization authority.  This authority shall issue access tokens that are JSON Web Tokens as defined in RFC 7519, using the `RS256` algorithm for the signature, and publish to all providers the public key for verifying that signature.

        The following fields shall be included in the JWT claim for access tokens issued by this authority:
            * `iss`, with the URL at which the token generation request was received.
            * `exp`, with a time no further than 1 hour in the future.
            * `sub`, with unique ID of the client requesting the access token.
            * `scope`, with an array of strings indicating the scopes granted.

        Multiple scopes for a single token shall be granted if requested.  The tokens granted by this authority shall protect against reuse of received tokens to impersonate the sender to other recipients (via use of the `aud` claim or other means).

        Clients shall provide these access tokens in an `Authorization` header in the form `Bearer <token>` in accordance with RFC 6750.


  schemas:
    UUIDv4:
      description: |-
        Universally-unique identifier (version 4).
      maxLength: 36
      minLength: 36
      type: string
      format: uuid
      pattern: >-
        "^[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-4[0-9a-fA-F]{3}\\-[8-b][0-9a-fA-F]{3}\\-[0-9a-fA-F]{12}$"
      example: '03e5572a-f733-49af-bc14-8a18bd53ee39'

    EntityUUID:
      $ref: '#/components/schemas/UUIDv4'

    EntityOVN:
      title: EntityOVN
      description: |-
        A token associated with a particular UTM Entity+version created
        by the DSS upon creation or modification of an Entity reference and provided
        to the client creating or modifying the Entity reference.  The EntityOVN
        is stored privately by the DSS and then compared against entries in a Key
        provided to mutate the airspace.  The EntityOVN is also provided by
        the client whenever that client transmits the full information of the Entity
        (either via GET, or via a subscription notification).
      required:
      - token
      - version
      type: object
      properties:
        version:
          format: int32
          description: This version increases each time an Entity is modified.  If
            a client ever receives a subscription update with an EntityOVN for
            a particular EntityUUID that is smaller than the cached EntityOVN
            for that EntityUUID, that subscription update should be ignored.
          type: integer
        token:
          $ref: '#/components/schemas/UUIDv4'

    OVNEntry:
      description: Mapping between an EntityUUID and an EntityOVN.
      required:
      - id
      - signature
      type: object
      properties:
        id:
          $ref: '#/components/schemas/EntityUUID'
        ovn:
          $ref: '#/components/schemas/EntityOVN'

    OVNList:
      description: Collection of mappings between EntityUUID and EntityOVN.
      type: array
      items:
        $ref: '#/components/schemas/OVNEntry'

    SubscriptionUUID:
      $ref: '#/components/schemas/UUIDv4'

    Key:
      description: |
        Proof that a client has obtained the latest airspace content, used to ensure that write operations to the DSS occur only when the latest content is known (i.e. has been read). The client is required to pass a current Key constructed from information obtained with previous read operations and subsequent requests for full information, and optionally, subscription updates for deconflicted write operations to the DSS.  The contents of this data structure are generated by the client.
      type: object
      properties:
        ovns:
          $ref: '#/components/schemas/OVNList'
        subscription:
          $ref: '#/components/schemas/SubscriptionUUID'

    Time:
      # REVISIT-- make this an object and add units!
      type: string
      format: date-time
      example: '1985-04-12T23:20:50.52Z'

    Altitude:
      # REVISIT-- make this an object and add units!
      format: float
      description: An altitude, in meters, above the WGS84 ellipsoid.
      type: number
      example: 19.5

    Latitude:
      format: double
      description: Degrees of latitude north of the equator, with reference to the
        WGS84 ellipsoid.
      maximum: 90
      exclusiveMaximum: false
      minimum: -90
      exclusiveMinimum: false
      type: number
      example: 34.123

    Longitude:
      format: double
      description: Degrees of longitude east of the Prime Meridian, with reference
        to the WGS84 ellipsoid.
      maximum: -180
      exclusiveMaximum: false
      minimum: 180
      exclusiveMinimum: false
      type: number
      example: -118.456

    Vertex:
      description: Single point on the earth's surface (latitude/longitude pair).
      required:
      - lat
      - lng
      type: object
      properties:
        lng:
          $ref: '#/components/schemas/Longitude'
        lat:
          $ref: '#/components/schemas/Latitude'

    Disc:
      description: |-
        A circular area on the earth.
      required:
      - center
      - radius
      example:
        center: { lat : -122.130343, lon : 47.677171 }
        radius: 120.3
      type: object
      properties:
        center:
          $ref: '#/components/schemas/Vertex'
        radius:
          description: Distance from the center of the disc (in meters).
          type: number
          minimum: 0
          example: 140.1

    Loop:
      description: |-
        An enclosed geographic area on the earth.
        The bounding edges of this polygon shall be the shortest paths between connected vertices.  This means, for instance, that the edge between two points both defined at a particular latitude is not generally contained at that latitude.
        The winding order shall be interpreted as the order which produces the smaller area.
        The path between two vertices shall be the shortest possible path between those vertices.
        Edges may not cross.
        Vertices may not be duplicated.  In particular, the final polygon vertex shall not be identical to the first vertex.
      type: array
      minItems: 3
      items:
        $ref: '#/components/schemas/Vertex'

    Volume3D:
      description: |-
        A three-dimensional geographic volume consisting of a vertically-extruded polygon.
      required:
      - area
      - altitude_lower
      - altitude_upper
      type: object
      properties:
        area:
          oneOf:
          - $ref: '#/components/schemas/Loop'
          - $ref: '#/components/schemas/Disc'
          description: A geographic shape on the surface of the earth.
          example:
            loop: [{lat : -122.130343, lon : 47.677171}, {lat : -122.129721, lon : 47.676781}, {lat : -122.130289, lon : 47.676701}]
        altitude_lower:
          $ref: '#/components/schemas/Altitude'
        altitude_upper:
          $ref: '#/components/schemas/Altitude'

    Volume4D:
      description: Contiguous block of geographic spacetime.
      required:
      - volume
      type: object
      properties:
        volume:
          $ref: '#/components/schemas/Volume3D'
        time_start:
          $ref: '#/components/schemas/Time'
        time_end:
          $ref: '#/components/schemas/Time'


    ErrorResponse:
      description: |-
        Human-readable string returned when an error occurs
        as a result of a USS - DSS transaction.
      type: object
      properties:
        message:
          description: |-
            Human-readable message indicating what error occurred and/or why.
          type: string


    SubscriptionCallbacks:
      description: |-
        Endpoints that should be called when an applicable event occurs.
        At least one field must be specified.
      type: object
      properties:
        operation_url:
          $ref: '#/components/schemas/OperationDetailsURL'
        constraint_url:
          $ref: '#/components/schemas/ConstraintDetailsURL'

    SubscriptionState:
      description: |-
        State of Subscription which is causing a notification to be sent.
      required:
      - subscription
      type: object
      properties:
        subscription_id:
          $ref: '#/components/schemas/SubscriptionUUID'
        notification_index:
          $ref: '#/components/schemas/SubscriptionNotificationIndex'

    SubscriberToNotify:
      description: |-
        Subscriber to notify of a creation/change/deletion of a change
        in the airspace.  This is provided by the DSS to a client changing the airspace,
        and it is the responsibility of the client changing the airspace (they will
        receive a set of these notification requests) to send a notification to each
        specified `url`.
      required:
      - subscriptions
      - url
      type: object
      properties:
        subscriptions:
          description: Subscription(s) prompting this notification.
          type: array
          items:
            $ref: '#/components/schemas/SubscriptionState'
        url:
          type: string
          example: 'https://my_utm_uss'

    Subscription:
      description: |-
        Specification of a geographic area that a client is interested
        in on an ongoing basis (e.g., “planning area”).  Internal to the DSS.
      required:
      - id
      - notification_index
      - owner
      - callbacks
      type: object
      properties:
        id:
          $ref: '#/components/schemas/SubscriptionUUID'
        owner:
          type: string
          example: '(uss_owner)'
          description: Created by the DSS and based on creating client’s ID (via access
            token).  Used for restricting mutation and deletion operations to owner.
        notification_index:
          $ref: '#/components/schemas/SubscriptionNotificationIndex'
        time_start:
          $ref: '#/components/schemas/Time'
        time_end:
          $ref: '#/components/schemas/Time'
        callbacks:
          $ref: '#/components/schemas/SubscriptionCallbacks'

    SubscriptionNotificationIndex:
      format: int32
      description: Tracks the notifications sent for a subscription so the subscriber
        can detect missed notifications more easily.
      type: integer

    SearchSubscriptionsResponse:
      description: Response to DSS query for subscriptions in a particular geographic area.
      required:
      - subscriptions
      type: object
      properties:
        subscriptions:
          description: Subscriptions that overlap the specified geographic area.
          type: array
          items:
            $ref: '#/components/schemas/Subscription'

    GetSubscriptionResponse:
      description: Response to DSS request for the subscription with the given id.
      required:
      - subscription
      type: object
      properties:
        subscription:
          $ref: '#/components/schemas/Subscription'

    CreateSubscriptionParameters:
      description: |-
        Parameters for a request to create/update a subscription in the DSS.
      required:
      - extents
      - callbacks
      type: object
      properties:
        extents:
          $ref: '#/components/schemas/Volume4D'
        callbacks:
          $ref: '#/components/schemas/SubscriptionCallbacks'

    PutSubscriptionResponse:
      description: |-
        Response for a request to create or update a subscription.
      required:
      - subscription
      type: object
      properties:
        subscription:
          $ref: '#/components/schemas/Subscription'
        operations:
          description: |-
            Operations in or near the subscription area
            at the time of creation/update, if `operation_url` callback
            was specified.
          type: array
          items:
            $ref: '#/components/schemas/OperationReference'
        constraints:
          description: |-
            Constraints in or near the subscription area
            at the time of creation/update, if `constraint_url` callback
            was specified.
          type: array
          items:
            $ref: '#/components/schemas/ConstraintReference'

    DeleteSubscriptionResponse:
      description: Response for a successful request to delete an Subscription.
      required:
      - subscription
      type: object
      properties:
        subscription:
          $ref: '#/components/schemas/Subscription'


    OperationDetailsURL:
      description: |-
        The URL at which the details of an Operation may be retrieved.  See `/uss/operations/{id}` path for specification of this endpoint.  This URL is the base Operations resource.  If this URL is specified as https://my_utm_uss.com/operations then the details for a particular {id} may be obtained at the URL https://my_utm_uss.com/operations/{id}.  This URL may not have a trailing / character.
      type: string
      example: 'https://my_utm_uss.com/operations'

    OperationCallbacks:
      description: |-
        Endpoints that should be called when an applicable event occurs.
      required:
      - details_url
      - feedback_url
      type: object
      properties:
        details_url:
          $ref: '#/components/schemas/OperationDetailsURL'
        feedback_url:
          $ref: '#/components/schemas/FeedbackURL'

    OperationState:
      description: |-
        State of an Operation.

        'ACCEPTED': This Operation was fully deconflicted from other Entities at the time it changed to this state, but no  aircraft associated with it are active yet.

        'ACTIVATED': One or more aircraft associated with this Operation are, or will imminently be, in flight.

        'NON_CONFORMING': This Operation is outside of the planned volume. A new volume MUST be submitted to the DSS.

        'CONTINGENCY': (Also known as ROGUE). This Operation has been NON_CONFORMING for a certain period of time. This state must transition to ENDED. A new volume MUST be submitted to the DSS.

        'ENDED': This Operation has ended (due to either an Operator-induced change or flight completion).
      type: string
      enum:
        - ACCEPTED
        - ACTIVATED
        - NON_CONFORMING
        - CONTINGENCY
        - ENDED

    OperationReference:
      description: |-
        The high-level information of a planned/active Operation with the URL
        of a USS to query for details.  Note: 'OVN' is returned ONLY to the USS that
        created the Operation but NEVER to other USS instances.
      required:
      - id
      - owner
      - time_start
      - time_end
      - callbacks
      type: object
      properties:
        id:
          $ref: '#/components/schemas/EntityUUID'
        owner:
          type: string
          example: '(uss_owner)'
          description: |-
            Created by the DSS and based on creating client’s ID (via access
            token).  Used for restricting mutation and deletion operations to owner.
        time_start:
          $ref: '#/components/schemas/Time'
        time_end:
          $ref: '#/components/schemas/Time'
        callbacks:
          $ref: '#/components/schemas/OperationCallbacks'
        ovn:
          $ref: '#/components/schemas/EntityOVN'

    CreateOperationReferenceParameters:
      description: Parameters for a request to create an OperationReference in the
        DSS.
      required:
      - extents
      - key
      - state
      - callbacks
      type: object
      properties:
        extents:
          $ref: '#/components/schemas/Volume4D'
        key:
          $ref: '#/components/schemas/Key'
        state:
          $ref: '#/components/schemas/OperationState'
        callbacks:
          $ref: '#/components/schemas/OperationCallbacks'

    GetOperationReferenceResponse:
      description: |-
        Response to DSS request for the OperationReference with the given ID.
      required:
      - operation_reference
      type: object
      properties:
        operation_reference:
          $ref: '#/components/schemas/OperationReference'

    ChangeOperationReferenceResponse:
      description: |-
        Response to a request to create, update, or delete an OperationReference
        in the DSS.
      required:
      - subscribers
      type: object
      properties:
        subscribers:
          description: |-
            DSS subscribers that this client now has the obligation to
            notify of the Operation changes just made.  This client must call POST
            for each provided URL according to the `/uss/operations/{id}` path API.
          type: array
          items:
            $ref: '#/components/schemas/SubscriberToNotify'
        operation_reference:
          $ref: '#/components/schemas/OperationReference'

    SearchOperationReferenceResponse:
      description: Response to DSS query for OperationReferences in an area of interest.
      required:
      - operation_references
      type: object
      properties:
        operation_references:
          description: OperationReferences in the area of interest.
          type: array
          items:
            $ref: '#/components/schemas/OperationReference'


    ConstraintDetailsURL:
      description: |-
        The URL at which the details of a Constraint may be retrieved.  See `/uss/constraints/{id}` path for specification of this endpoint.
        This URL is the base Constraints resource.  If this URL is specified as https://my_utm_uss.com/constraints then the details for a particular {id} may be obtained at the URL https://my_utm_uss.com/constraints/{id}.  This URL may not have a trailing / character.
      type: string
      example: 'https://my_utm_uss.com/constraints'

    ConstraintCallbacks:
      description: |-
        Endpoints that should be called when an applicable event occurs.
      required:
      - details_url
      - feedback_url
      type: object
      properties:
        details_url:
          $ref: '#/components/schemas/ConstraintDetailsURL'
        feedback_url:
          $ref: '#/components/schemas/FeedbackURL'

    ConstraintReference:
      description: A ConstraintReference (area in which a Constraint is present, along
        with other high-level information, but no details).  The DSS reports only
        these references and clients must exchange details and additional information
        peer-to-peer.
      required:
      - id
      - owner
      - time_start
      - time_end
      - callbacks
      type: object
      properties:
        id:
          $ref: '#/components/schemas/EntityUUID'
        owner:
          description: Created by the DSS and based on creating client’s ID (via access
            token).  Used for restricting mutation and deletion transactions to the entity owner.
          type: string
          example: '(uss_owner)'
        time_start:
          $ref: '#/components/schemas/Time'
        time_end:
          $ref: '#/components/schemas/Time'
        callbacks:
          $ref: '#/components/schemas/ConstraintCallbacks'

    CreateConstraintReferenceParameters:
      description: Parameters for a request to create/update a ConstraintReference in the
        DSS.
      required:
      - extents
      - callbacks
      - feedback_url
      type: object
      properties:
        extents:
          $ref: '#/components/schemas/Volume4D'
        callbacks:
          $ref: '#/components/schemas/ConstraintCallbacks'

    GetConstraintReferenceResponse:
      description: Response to DSS request for the ConstraintReference with the given
        ID.
      required:
      - constraint_reference
      type: object
      properties:
        constraint_reference:
          $ref: '#/components/schemas/ConstraintReference'

    ChangeConstraintReferenceResponse:
      description: Response to a request to create, update, or delete a ConstraintReference.
        in the DSS.
      required:
      - subscribers
      type: object
      properties:
        subscribers:
          description: DSS subscribers that this client now has the obligation to
            notify of the Constraint changes just made.  This client must call POST
            for each provided URL according to the `/uss/constraints/{id}` path API.
          type: array
          items:
            $ref: '#/components/schemas/SubscriberToNotify'
        constraint_reference:
          $ref: '#/components/schemas/ConstraintReference'

    SearchConstraintReferencesResponse:
      description: Response to DSS query for ConstraintReferences in an area of interest.
      required:
      - constraint_references
      type: object
      properties:
        constraint_references:
          description: ConstraintReferences in the area of interest.
          type: array
          items:
            $ref: '#/components/schemas/ConstraintReference'


    EntityReference:
      description: Reference to a generic Entity known to the DSS.
      type: object
      properties:
        operation_reference:
          $ref: '#/components/schemas/OperationReference'
        constraint_reference:
          $ref: '#/components/schemas/ConstraintReference'


    FeedbackURL:
      description: |-
        The URL at which feedback may be submitted.  See `/uss/feedback/{id}` path for specification of this endpoint.
        This URL is the base Feedback resource.  If this URL is specified as https://my_utm_uss.com/feedback then feedback with {id} may be submitted at the URL https://my_utm_uss.com/feedback/{id}.  This URL may not have a trailing / character.
      type: string
      example: 'https://my_utm_uss.com/feedback'


    AirspaceConflictResponse:
      description: Data provided when an airspace conflict was encountered.
      type: object
      properties:
        message:
          description: Human-readable message indicating what error occurred and/or
            why.
          type: string
        entity_conflicts:
          description: List of Entity references for which current proof of knowledge
            was not provided.  If this field is present and contains elements, the
            calling USS should query the details URLs for these Entities to obtain
            their details and correct OVNs.  The OVNs can be used to update
            the key, at which point the USS may retry this call.
          type: array
          items:
            $ref: '#/components/schemas/EntityReference'

paths:
  #
  # DSS Endpoint: OPERATIONS
  #

  /v1/dss-utm/operations:
    summary: Query all Operations in the DSS that intersect with a specified geographic area and time-range.
    description: "Interface to Operation references in the DSS."

    get:
      tags:
      - "Operations"
      security:
      - Authority:
        - utm.read.operations
      summary: Retrieve all Operations (references) in the specified area/volume from the DSS.
      parameters:
      - name: ' '
        description: |-
          The area/volume in which to search for Operation entities.  References for some
          Operations near this area but wholly outside it may also be returned.
          
          Note that this parameter is a JSON object ('request-body'). Note that either
          or both of the 'altitude' and 'time' values may be omitted from this parameter.
        schema:
          $ref: '#/components/schemas/Volume4D'
        in: query
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchOperationReferenceResponse'
          description: Operations were successfully retrieved.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: One or more input parameters were missing or invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bearer access token was not provided in Authorization header,
            token could not be decoded, or token was invalid.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The access token was decoded successfully but did not include
            a scope appropriate to this endpoint.
        "413":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The requested area was too large.

  /v1/dss-utm/operations/{id}:
    summary: Create/Update/Query a specified Operation in/from the DSS.
    parameters:
    - name: id
      description: EntityUUID of the Operation.
      schema:
        $ref: '#/components/schemas/EntityUUID'
      in: path
      required: true

    get:
      tags:
      - "Operations"
      security:
      - Authority:
        - utm.read.operations
      summary: Retrieve the specified Operation (reference) from the DSS.
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetOperationReferenceResponse'
          description: Operation was retrieved successfully.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: One or more input parameters were missing or invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bearer access token was not provided in Authorization header,
            token could not be decoded, or token was invalid.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The access token was decoded successfully but did not include
            a scope appropriate to this endpoint.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The requested Entity could not be found.

    put:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOperationReferenceParameters'
        required: true
      tags:
      - "Operations"
      security:
      - Authority:
        - utm.write.operations
      summary: Create/Update the specified Operation.
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChangeOperationReferenceResponse'
          description: An Operation was created successfully in the DSS.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: |-
            * One or more input parameters were missing or invalid.
            * The request attempted to mutate the Operation in a disallowed way.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bearer access token was not provided in Authorization header,
            token could not be decoded, or token was invalid.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The access token was decoded successfully but did not include
            a scope appropriate to this endpoint.
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AirspaceConflictResponse'
          description: |-
            * The provided key did not prove knowledge of all current and relevant airspace Entities
            * An Operation with the specified ID already exists.
            * Despite repeated attempts, the DSS was unable to complete the update because of other simultaneous changes.
        "413":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The area of the Operation is too large.

    delete:
      tags:
        - "Operations"
      security:
        - Authority:
          - utm.write.operations
      summary: Remove the specified Operation from the DSS.
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChangeOperationReferenceResponse'
          description: The specified Operation was successfully removed from the DSS.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: |-
              * One or more input parameters were missing or invalid.
              * The request attempted to mutate the Operation in a disallowed way.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bearer access token was not provided in Authorization header,
              token could not be decoded, or token was invalid.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The access token was decoded successfully but did not include
              a scope appropriate to this endpoint.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The requested Entity could not be found.

  #
  # DSS Enpoint: CONSTRAINTS
  #

  /v1/dss-utm/constraints:
    summary: Query all Constraints in the DSS that intersect with a specified area/volume.
    description: ""

    get:
      tags:
      - "Constraints"
      security:
      - Authority:
        - utm.read.constraints
      summary: Retrieve all Constraints (references) in the specified area/volume from the DSS.
      parameters:
      - name: ' '
        description: |-
          The area/volume in which to search for Constraint entities.  References for some
          Constraints near this area but wholly outside it may also be returned.
          
          Note that this parameter is a JSON object (in the 'request-body'). Note that either
          or both of the 'altitude' and 'time' values may be omitted from this parameter.
        schema:
          $ref: '#/components/schemas/Volume4D'
        in: query
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchConstraintReferencesResponse'
          description: Constraints were successfully retrieved.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: One or more input parameters were missing or invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bearer access token was not provided in Authorization header,
            token could not be decoded, or token was invalid.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The access token was decoded successfully but did not include
            a scope appropriate to this endpoint.
        "413":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The requested area was too large.

  /v1/dss-utm/constraints/{id}:
    parameters:
    - name: id
      description: EntityUUID of the Constraint.
      schema:
        $ref: '#/components/schemas/EntityUUID'
      in: path
      required: true
    summary: Create/Update/Query a specific Constraint in/from the DSS.

    get:
      tags:
      - "Constraints"
      security:
      - Authority:
        - utm.read.constraints
      summary: Retrieve the specified Constraint (reference) from the DSS.
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetConstraintReferenceResponse'
          description: Constraint was retrieved successfully.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: One or more input parameters were missing or invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bearer access token was not provided in Authorization header,
            token could not be decoded, or token was invalid.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The access token was decoded successfully but did not include
            a scope appropriate to this endpoint.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The requested Entity could not be found.

    put:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateConstraintReferenceParameters'
        required: true
      tags:
      - "Constraints"
      security:
      - Authority:
        - utm.write.constraints
      summary: Create/Update the specified Constraint in the DSS.
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChangeConstraintReferenceResponse'
          description: A Constraint was created successfully in the DSS.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: |-
            * One or more input parameters were missing or invalid.
            * The request attempted to mutate the Constraint in a disallowed way.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bearer access token was not provided in Authorization header,
            token could not be decoded, or token was invalid.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The access token was decoded successfully but did not include
            a scope appropriate to this endpoint.
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: |-
            * A Constraint with the specified ID already exists.
            * Despite repeated attempts, the DSS was unable to complete the update because of other simultaneous changes.
        "413":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The area of the Operation is too large.

    delete:
      tags:
      - "Constraints"
      security:
        - Authority:
          - utm.write.constraints
      summary: Delete the specified Constraint from the DSS.
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChangeConstraintReferenceResponse'
          description: The Constraint was successfully removed from the DSS.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: |-
              * One or more input parameters were missing or invalid.
              * The request attempted to mutate the Constraint in a disallowed way.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bearer access token was not provided in Authorization header,
              token could not be decoded, or token was invalid.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The access token was decoded successfully but did not include
              a scope appropriate to this endpoint.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The requested Entity could not be found.
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: |-
              * A Constraint with the specified ID already exists.
              * Despite repeated attempts, the DSS was unable to complete the update because of other simultaneous changes.

  #
  # DSS Endpoint: SUBSCRIPTIONS
  #

  /v1/dss-utm/subscriptions:
    summary: Subscriptions for airspace updates to a volume of interest.

    get:
      tags:
      - "Subscriptions"
      security:
      - Authority:
        - dss.read.subscriptions
      description: |-
        Retrieve Subscriptions intersecting an area of interest.  Subscription
        notifications are only triggered by (and contain full information of) changes to,
        creation of, or deletion of, Entities referenced by or stored in the DSS;
        they do not involve any data transfer (such as remote ID telemetry updates) apart
        from Entity information.

        Note that this parameter is a JSON object (in the 'request-body'). Note that either
        or both of the 'altitude' and 'time' values may be omitted from this parameter.

        Only Subscriptions belonging to the caller are returned.  This endpoint would be
        used if a USS lost track of Subscriptions they had created and/or wanted to resolve
        an error indicating that they had too many existing Subscriptions in an area.
      summary: Retrieve all Subscriptions (references) in the specified area/volume from the DSS.
      parameters:
      - name: ' '
        in: query
        required: true
        description: The area/volume in which to search for Subscriptions.  References to some Subscriptions
          near this area but wholly outside it may also be returned.
        schema:
          $ref: '#/components/schemas/Volume4D'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchSubscriptionsResponse'
          description: Subscriptions were retrieved successfully.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: One or more input parameters were missing or invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bearer access token was not provided in Authorization header,
            token could not be decoded, or token was invalid.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The access token was decoded successfully but did not include
            a scope appropriate to this endpoint.
        "413":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The requested area was too large.
  
  /v1/dss-utm/subscriptions/{id}:
    summary: Create/Update/Query a specific Subscription (reference) in the DSS.
    parameters:
    - name: id
      description: SubscriptionUUID of the subscription of interest.
      schema:
        $ref: '#/components/schemas/SubscriptionUUID'
      in: path
      required: true

    get:
      tags:
      - "Subscriptions"
      security:
      - Authority:
        - dss.read.subscriptions
      summary: Retrieve the specified Subscription (reference) from the DSS.
      description: |-
        Retrieve a specific subscription.
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetSubscriptionResponse'
          description: Subscription information was retrieved successfully.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: One or more input parameters were missing or invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bearer access token was not provided in Authorization header,
            token could not be decoded, or token was invalid.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The access token was decoded successfully but did not include
            a scope appropriate to this endpoint.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: A Subscription with the specified ID was not found.

    put:
      security:
      - Authority:
        - dss.write.subscriptions
      summary: Create/Update the specified Subscription in the DSS.
      description: |-
        Create or update a subscription.  This call will fail if a Subscription with the same ID already exists.

        Subscription notifications are only triggered by (and contain full information of) changes to, creation of, or deletion of, Entities referenced by or stored in the DSS; they do not involve any data transfer (such as remote ID telemetry updates) apart from Entity information.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSubscriptionParameters'
        required: true
      tags:
      - "Subscriptions"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PutSubscriptionResponse'
          description: A new Subscription was created successfully.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: |-
            * One or more input parameters were missing or invalid.
            * The request attempted to mutate the Subscription in a disallowed way.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bearer access token was not provided in Authorization header,
            token could not be decoded, or token was invalid.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: |-
            * The access token was decoded successfully but did not include a scope appropriate to this endpoint or the request.
            * An EntityType was specified in `types_filter` to which the scopes included in the access token do not provide access.
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: |-
            * A Subscription with the specified ID already exists and is owned by a different client.
            * Despite repeated attempts, the DSS was unable to complete the update because of other simultaneous changes.
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Client already has too many Subscriptions in the area where
            a new Subscription was requested.  To correct this problem, the client
            may query GET /subscriptions to see which Subscriptions are counting against
            their limit.  This problem should not generally be encountered because
            the Subscription limit should be above what any consumer that reasonably
            aggregates their Subscriptions should request.  But, a Subscription limit
            is necessary to bound performance requirements for DSS instances and would
            likely be hit by, e.g., a large remote ID display provider that created
            a Subscription for each of their display client users' views.

    delete:
      tags:
      - "Subscriptions"
      security:
        - Authority:
          - dss.read.subscriptions
          - dss.write.subscriptions
      summary: Remove the specified Subscription from the DSS.
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteSubscriptionResponse'
          description: Subscription was successfully removed from DSS.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: One or more input parameters were missing or invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bearer access token was not provided in Authorization header,
              token could not be decoded, or token was invalid.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The access token was decoded successfully but did not include
              a scope appropriate to this endpoint.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: A Subscription with the specified ID was not found.
