---
openapi: 3.0.2
info:
  title: UTM USS->DSS API
  version: 0.1.3
  description: |-
    Interface definitions for 'Discovery and Synchronization Service' (DSS).

    Used for identification of peer UTM USS instances (managing flight operations and constraints).

    Note: Unless otherwise specified, fields specified in a message but not declared in the API shall be ignored.

security:
- Authority:
  - utm.read.operations
  - utm.write.operations
  - utm.read.constraints
  - utm.write.constraints
  - utm.read.subscriptions
  - utm.write.subscriptions

tags:
- name: "Operations"
  description: |-
    Endpoints exposed by the DSS for interaction with Operation entities.
- name: "Constraints"
  description: |-
    Endpoints exposed by the DSS for interaction with Constraint entities.
- name: "Subscriptions"
  description: |-
    Endpoints exposed by the DSS for interaction with Subscription entities.
- name: "Reports"
  description: |-
    Endpoints exposed by the DSS for reporting peer DSS issues.

#
#
#

components:
  securitySchemes:
    Authority:
      type: oauth2
      flows:
        clientCredentials:
          tokenUrl: https://token_vendor.com/oauth/token
          scopes:
            utm.read.operations: |-
              Client may read Operations from the DSS (references) and partner USSs (details).
            utm.write.operations: |-
              Client may create, edit, and delete (their own) Operations, as well as all operations permitted by `utm.read.operations`.
            utm.read.constraints: |-
              Client may read Constraints from the DSS (references) and partner USSs (details).
            utm.write.constraints: |-
              Client may create, edit, and delete (their own) Constraints, as well as all operations permitted by `utm.read.constraints`.
            utm.read.subscriptions: |-
              Client may read their own Subscriptions from the DSS.
            utm.write.subscriptions: |-
              Client may create, edit, and delete their own Subscriptions in the DSS.
      description: |-
        Authorization from, or on behalf of, an authorization authority.  This authority shall issue access tokens that are JSON Web Tokens as defined in RFC 7519, using the `RS256` algorithm for the signature, and publish to all providers the public key for verifying that signature.

        The following fields shall be included in the JWT claim for access tokens issued by this authority:
            * `iss`, with the URL at which the token generation request was received.
            * `exp`, with a time no further than 1 hour in the future.
            * `sub`, with unique ID of the client requesting the access token.
            * `scope`, with an array of strings indicating the scopes granted.

        Multiple scopes for a single token shall be granted if requested.  The tokens granted by this authority shall protect against reuse of received tokens to impersonate the sender to other recipients (via use of the `aud` claim or other means).

        Clients shall provide these access tokens in an `Authorization` header in the form `Bearer <token>` in accordance with RFC 6750.


  schemas:
    UUIDv4:
      description: |-
        Universally-unique identifier (version 4).
      maxLength: 36
      minLength: 36
      type: string
      format: uuid
      pattern: >-
        "^[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-4[0-9a-fA-F]{3}\\-[8-b][0-9a-fA-F]{3}\\-[0-9a-fA-F]{12}$"
      example: '03e5572a-f733-49af-bc14-8a18bd53ee39'

    EntityUUID:
      description: |-
        Universally-unique identifier for an Entity communicated through
        the DSS.  Formatted as UUIDv4.
      allOf:
      - $ref: '#/components/schemas/UUIDv4'

    EntityOVN:
      title: EntityOVN
      description: |-
        A token associated with a particular UTM Entity+version created
        by the DSS upon creation or modification of an Entity reference and provided
        to the client creating or modifying the Entity reference.  The EntityOVN
        is stored privately by the DSS and then compared against entries in a Key
        provided to mutate the airspace.  The EntityOVN is also provided by
        the client whenever that client transmits the full information of the Entity
        (either via GET, or via a subscription notification).
      required:
      - token
      - version
      type: object
      properties:
        version:
          format: int32
          description: This version increases each time an Entity is modified.  If
            a client ever receives a subscription update with an EntityOVN for
            a particular EntityUUID that is smaller than the cached EntityOVN
            for that EntityUUID, that subscription update should be ignored.
          type: integer
        token:
          description: |-
            Universally-unique identifier associated with a specific set of
            data.
          allOf:
          - $ref: '#/components/schemas/UUIDv4'

    OVNEntry:
      description: Mapping between an EntityUUID and an EntityOVN.
      required:
      - entity_id
      - entity_ovn
      type: object
      properties:
        entity_id:
          $ref: '#/components/schemas/EntityUUID'
        entity_ovn:
          $ref: '#/components/schemas/EntityOVN'

    OVNList:
      description: Collection of mappings between EntityUUID and EntityOVN.
      type: array
      items:
        $ref: '#/components/schemas/OVNEntry'

    SubscriptionUUID:
      description: |-
        Universally-unique identifier for a Subscription communicated through
        the DSS.  Formatted as UUIDv4.
      allOf:
      - $ref: '#/components/schemas/UUIDv4'

    Key:
      description: |
        Proof that a client has obtained the latest airspace content, used to ensure that write operations to the DSS occur only when the latest content is known (i.e. has been read). The client is required to pass a current Key constructed from information obtained with previous read operations and subsequent requests for full information, and optionally, subscription updates for deconflicted write operations to the DSS.  The contents of this data structure are generated by the client.
      type: object
      properties:
        ovn_list:
          $ref: '#/components/schemas/OVNList'

    Time:
      type: string
      format: date-time
      example: '1985-04-12T23:20:50.52Z'

    TimeWithUnits:
      required:
      - time
      - units
      type: object
      properties:
        time:
          $ref: '#/components/schemas/Time'
        units:
          type: string
          enum:
          - RFC3339

    Radius:
      format: float
      description: Distance, in meters, from the centerpoint of a circular area.
      type: number
      example: 300.183

    RadiusWithUnits:
      required:
      - radius
      - units
      type: object
      properties:
        radius:
          $ref: '#/components/schemas/Radius'
        units:
          type: string
          enum:
          - Meters

    Altitude:
      format: float
      description: An altitude, in meters, above the WGS84 ellipsoid.
      type: number
      example: 19.5

    AltitudeWithUnits:
      required:
      - altitude
      - units
      type: object
      properties:
        altitude:
          $ref: '#/components/schemas/Altitude'
        units:
          type: string
          enum:
          - Meters_WGS84

    Latitude:
      description: Degrees of latitude north of the equator, with reference to the WGS84 ellipsoid.
      maximum: 90
      exclusiveMaximum: false
      minimum: -90
      exclusiveMinimum: false
      type: number
      format: double
      example: 34.123

    Longitude:
      description: Degrees of longitude east of the Prime Meridian, with reference to the WGS84 ellipsoid.
      maximum: -180
      exclusiveMaximum: false
      minimum: 180
      exclusiveMinimum: false
      type: number
      format: double
      example: -118.456

    LonLatPair:
      description: Longitude/Latitude pair (in that order) used for specifying geographical vertex. Specified as an array. Order is important!
      type: array
      maxItems: 2
      minItems: 2
      items:
        oneOf:
          - $ref: '#/components/schemas/Longitude'
          - $ref: '#/components/schemas/Latitude'
      example: [-122.106325, 47.660898]

#
# GeoJSON definitions
#

# Original version: https://gist.github.com/bubbobne/fe5f2db65acf039be6a9fd92fc9c7233
# Edits by joseph.rios@nasa.gov

#MIT License
#Copyright (c) 2017 Daniele Andreis
#Permission is hereby granted, free of charge, to any person obtaining a copy
#of this software and associated documentation files (the "Software"), to deal
#in the Software without restriction, including without limitation the rights
#to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
#copies of the Software, and to permit persons to whom the Software is
#furnished to do so, subject to the following conditions:
#
#
#The above copyright notice and this permission notice shall be included in all
#copies or substantial portions of the Software.
#
#THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
#AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
#LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
#OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
#SOFTWARE.

    Point:
      type: object
      description: GeoJSon Point, limited to 2D.
      externalDocs:
        url: https://tools.ietf.org/html/rfc7946#section-3.1.2
      properties:
        type:
          description: The type of Geometry. In this case, must be 'Point' per GeoJSON spec.
          type: string
          enum:
          - Point
        coordinates:
          $ref: '#/components/schemas/LonLatPair'

    Polygon:
      type: object
      required:
        - type
        - coordinates
      description: GeoJSon Polygon. Positions all 2D.
      externalDocs:
        url: https://tools.ietf.org/html/rfc7946#section-3.1.6
      properties:
        type:
          description: |
            The type of Geometry. In this case, must be 'Polygon' per GeoJSON
            spec.  Note that the "coordinates" member is validated to be be an
            array of size one. This implies there are no interior rings allowed
            currently.
          type: string
          enum:
          - Polygon
        coordinates:
          type: array
          description: >-
            The number of polygons allowed.  Currently 1, implying no interior
            rings.  If this number is changes, the maxItems should be considered.
            From RFC7946:
            o  For type "Polygon", the "coordinates" member MUST be an array of
            linear ring coordinate arrays.
            o  For Polygons with more than one of these rings, the first MUST be
            the exterior ring, and any others MUST be interior rings.  The
            exterior ring bounds the surface, and the interior rings (if
            present) bound holes within the surface.
            Again, note we only allow a single set of coordinates, implying no
            interior rings.
          minItems: 1
          maxItems: 1
          items:
            type: array
            description: >-
              The number of vertices in this polygon. From RFC7946:
                o  A linear ring is a closed LineString with four or more positions.
                o  The first and last positions are equivalent, and they MUST contain
                identical values; their representation SHOULD also be identical.
                o  A linear ring is the boundary of a surface or the boundary of a
                hole in a surface.
                o  A linear ring MUST follow the right-hand rule with respect to the
                area it bounds, i.e., exterior rings are counterclockwise, and
                holes are clockwise.  (also in the spec:  parsers SHOULD NOT reject
                Polygons that do not follow the right-hand rule.)
                https://tools.ietf.org/html/rfc7946#section-3.1.6
            minItems: 4
            maxItems: 100
            items:
              $ref: '#/components/schemas/Point'

    Circle:
      description: |-
        Local extension of the GeoJSON specification to add a circular area defined by a Point/Radius pair. We extend the Properties object to include a 'radius' and 'radius_units' value (see RadiusWithUnits for details).
      required:
        - type
        - geometry
        - properties
      type: object
      properties:
        type:
          description: The type of Geometry. In this case, must be 'Feature' per GeoJSON spec.
          type: string
          enum:
          - Feature
        geometry:
          type: object
          properties:
            type:
              description: The type of Geometry. Must be Point.
              type: string
              enum:
              - Point
            coordinates:
              $ref: '#/components/schemas/Point'
        properties:
          $ref: '#/components/schemas/RadiusWithUnits'

#
# End of GeoJSON definitions
#

    Volume3D:
      description: |-
        A three-dimensional geographic volume consisting of a vertically-extruded polygon.
      required:
      - area
      - altitude_lower
      - altitude_upper
      type: object
      properties:
        area:
          oneOf:
          - $ref: '#/components/schemas/Polygon'
          - $ref: '#/components/schemas/Circle'
          description: A geographic shape on the surface of the earth.
          example:
            type: 'Feature'
            properties:
              radius: 300.0
              radius_units: 'METERS_WGS84'
            geometry:
              type: 'Point'
              coordinates: [-121.0123, 156.789]
        altitude_lower:
          description: Minimum bounding altitude of this volume.
          allOf:
          - $ref: '#/components/schemas/AltitudeWithUnits'
        altitude_upper:
          description: Maximum bounding altitude of this volume.
          allOf:
          - $ref: '#/components/schemas/AltitudeWithUnits'

    Volume4D:
      description: Contiguous block of geographic spacetime.
      required:
      - volume
      type: object
      properties:
        volume:
          $ref: '#/components/schemas/Volume3D'
        time_start:
          description: Beginning time of this volume.
          allOf:
          - $ref: '#/components/schemas/TimeWithUnits'
        time_end:
          description: End time of this volume.
          allOf:
          - $ref: '#/components/schemas/TimeWithUnits'


    ErrorResponse:
      description: |-
        Human-readable string returned when an error occurs
        as a result of a USS - DSS transaction.
      type: object
      properties:
        message:
          description: |-
            Human-readable message indicating what error occurred and/or why.
          type: string


    SubscriptionCallbacks:
      description: |-
        Endpoints that should be called when an applicable event occurs.
        At least one field must be specified.
      required:
      - notify_operation_url
      - notify_constraint_url
      type: object
      properties:
        notify_operation_url:
          $ref: '#/components/schemas/NotifyOperationDetailsURL'
        notify_constraint_url:
          $ref: '#/components/schemas/NotifyConstraintDetailsURL'

    SubscriptionState:
      description: |-
        State of Subscription which is causing a notification to be sent.
      required:
      - subscription
      type: object
      properties:
        subscription_id:
          $ref: '#/components/schemas/SubscriptionUUID'
        notification_index:
          $ref: '#/components/schemas/SubscriptionNotificationIndex'

    SubscriberToNotify:
      description: |-
        Subscriber to notify of a creation/change/deletion of a change
        in the airspace.  This is provided by the DSS to a client changing the airspace,
        and it is the responsibility of the client changing the airspace (they will
        receive a set of these notification requests) to send a notification to each
        specified `url`.
      required:
      - subscriptions
      - url
      type: object
      properties:
        subscriptions:
          description: Subscription(s) prompting this notification.
          type: array
          items:
            $ref: '#/components/schemas/SubscriptionState'
        url:
          type: string
          example: 'https://my_utm_uss'

    OperationDependencyList:
      description: List of Operations (UUIDs) that are dependent on this Subscription.
      type: array
      items:
        $ref: '#/components/schemas/EntityUUID'

    Subscription:
      description: |-
        Specification of a geographic area that a client is interested
        in on an ongoing basis (e.g., “planning area”).  Internal to the DSS.
      required:
      - id
      - notification_index
      - callbacks
      type: object
      properties:
        id:
          $ref: '#/components/schemas/SubscriptionUUID'
        owner:
          type: string
          example: '(uss_owner)'
          description: Created by the DSS and based on creating client’s ID (via access
            token).  Used for restricting mutation and deletion operations to owner.
        notification_index:
          $ref: '#/components/schemas/SubscriptionNotificationIndex'
        time_start:
          description: |-
            If set, this subscription will not receive notifications before this time.
          allOf:
          - $ref: '#/components/schemas/TimeWithUnits'
        time_end:
          description: |-
            If set, this subscription will not receive notifications after this time.
          allOf:
          - $ref: '#/components/schemas/TimeWithUnits'
        callbacks:
          $ref: '#/components/schemas/SubscriptionCallbacks'
        created_by_operation:
          description: |-
            True if this Subscription was implicitly created by the DSS via the creation of an
            Operation, and should therefore be deleted by the DSS when that Operation is deleted.
          type: boolean
        dependent_operations:
          $ref: '#/components/schemas/OperationDependencyList'

    SubscriptionNotificationIndex:
      format: int32
      description: Tracks the notifications sent for a subscription so the subscriber
        can detect missed notifications more easily.
      type: integer

    SearchSubscriptionsResponse:
      description: Response to DSS query for subscriptions in a particular geographic area.
      required:
      - subscriptions
      type: object
      properties:
        subscriptions:
          description: Subscriptions that overlap the specified geographic area.
          type: array
          items:
            $ref: '#/components/schemas/Subscription'

    GetSubscriptionResponse:
      description: Response to DSS request for the subscription with the given id.
      required:
      - subscription
      type: object
      properties:
        subscription:
          $ref: '#/components/schemas/Subscription'

    PutSubscriptionParameters:
      description: |-
        Parameters for a request to create/update a subscription in the DSS.
      required:
      - extents
      - callbacks
      type: object
      properties:
        extents:
          $ref: '#/components/schemas/Volume4D'
        callbacks:
          $ref: '#/components/schemas/SubscriptionCallbacks'

    PutSubscriptionResponse:
      description: |-
        Response for a request to create or update a subscription.
      required:
      - subscription
      type: object
      properties:
        subscription:
          $ref: '#/components/schemas/Subscription'
        operations:
          description: |-
            Operations in or near the subscription area
            at the time of creation/update, if `operation_url` callback
            was specified.
          type: array
          items:
            $ref: '#/components/schemas/OperationReference'
        constraints:
          description: |-
            Constraints in or near the subscription area
            at the time of creation/update, if `constraint_url` callback
            was specified.
          type: array
          items:
            $ref: '#/components/schemas/ConstraintReference'

    DeleteSubscriptionResponse:
      description: Response for a successful request to delete an Subscription.
      required:
      - subscription
      type: object
      properties:
        subscription:
          $ref: '#/components/schemas/Subscription'


    QueryOperationDetailsURL:
      description: |-
        The base URL of a USS implementation of (at least) the GET Operation details portion of the USS-USS API.
        Per the USS-USS API, the full URL to retrieve the details of an Operation with a particular {id} can
        be constructed by appending `/v1/operations/{id}` to this base URL.  Accordingly, this URL may
        not have a trailing '/' character.  At times when telemetry is available for this operation, it may
        be retrieved at `{QueryOperationBaseURL}/v1/operations/{id}/telemetry`.  See
        `GET /v1/operations/{id}` and `GET /v1/operations/{id}/telemetry` in the USS-USS API for more information.
      type: string
      example: 'https://uss.com/utm'

    NotifyOperationDetailsURL:
      description: |-
        The base URL of a USS implementation of (at least) the PUT Operation details portion of the USS-USS API.
        Per the USS-USS API, the full URL to notify the implementing USS of updated details for an Operation
        with a particular {id} can be constructed by appending `/v1/operations/{id}` to this base URL.
        Accordingly, this URL may not have a trailing '/' character.  See `PUT /v1/operations/{id}` and
        `DELETE /v1/operations/{id}` in the USS-USS API for more information.
      type: string
      example: 'https://uss.com/utm'

    OperationCallbacks:
      description: |-
        Endpoints that should be called when an applicable event occurs to ensure the
        Operator remains aware of relevant airspace information.
        This field should be populated there is no existing Subscription provided in
        `subscription_id` is not provided.  If provided, this
        information will be used to create an implicit Subscription associated with this Operation.
      required:
      - query_details_url
      - notify_feedback_url
      type: object
      properties:
        query_details_url:
          $ref: '#/components/schemas/QueryOperationDetailsURL'
        notify_feedback_url:
          $ref: '#/components/schemas/ReportsBaseURL'

    OperationState:
      description: |-
        State of an Operation.

        'Accepted': This Operation was fully deconflicted from other Entities at the time it changed to this state, but no aircraft associated with it are active yet.  The create or update request for this Operation must include a Key containing all OVNs for all relevant Entities.

        'Activated': One or more aircraft associated with this Operation are, or will imminently be, in flight.  The create or update request for this Operation must include a Key containing all OVNs for all relevant Entities.

        'NonConforming': This Operation is outside of the planned volume.  The new or updated volumes MUST contain the actual position of the aircraft.  In this state, the `/v1/operation_details/{id}/telemetry' USS-USS endpoint MUST respond (if possible) to queries from USS peers.  The create or update request for this Operation may omit a Key in this case because the Operation is being adjusted as flown and cannot necessarily deconflict.

        'Contingent': This Operation is executing a contingency action, either because is has been NonConforming for a certain period of time, or because of operator initiation.  This state must transition to Ended.  The new or updated volumes MUST contain the actual position of the aircraft.  In this state, the `/v1/operation_details/{id}/telemetry' USS-USS endpoint MUST respond (if possible) to queries from USS peers.  The create or update request for this Operation may omit a Key in this case because the Operation is being adjusted as flown and cannot necessarily deconflict.

        'Ended': This Operation has ended (due to either an Operator-induced change or flight completion).
      type: string
      enum:
        - Accepted
        - Activated
        - NonConforming
        - Contingent
        - Ended

    OperationReference:
      description: |-
        The high-level information of a planned or active Operation with the URL
        of a USS to query for details.  Note: 'OVN' is returned ONLY to the USS that
        created the Operation but NEVER to other USS instances.
      required:
      - id
      - time_start
      - time_end
      - callbacks
      type: object
      properties:
        id:
          $ref: '#/components/schemas/EntityUUID'
        ovn:
          description: |-
            Opaque version number of this Operation.  Populated only when the OperationReference
            is owned by the USS retrieving it.  Not populated when the OperationReference is not
            owned by the USS retrieving it (instead, the USS must obtain the OVN from the details
            retrieved from the owning USS).
          allOf:
          - $ref: '#/components/schemas/EntityOVN'
        owner:
          type: string
          example: 'uss1'
          description: |-
            Created by the DSS and based on creating client’s ID (via access
            token).  Used for restricting mutation and deletion operations to owner.
        time_start:
          description: Beginning time of Operation.
          allOf:
          - $ref: '#/components/schemas/TimeWithUnits'
        time_end:
          description: End time of Operation.
          allOf:
          - $ref: '#/components/schemas/TimeWithUnits'
        callbacks:
          $ref: '#/components/schemas/OperationCallbacks'
        subscription_id:
          description: |-
            The ID of the Subscription that is ensuring the Operation owner receives relevant airspace updates while that Operation is 
          allOf:
          - $ref: '#/components/schemas/SubscriptionUUID'

    PutOperationReferenceParameters:
      description: |-
        Parameters for a request to create an OperationReference in the DSS.
        A subscription to changes overlapping this volume is implicitly created, but
        this can be overridden by providing the (optional) 'subscription_id' to use.
        Note: The implicit subscription is managed by the DSS, not the USS.
      required:
      - extents
      - key
      - state
      - callbacks
      type: object
      properties:
        extents:
          $ref: '#/components/schemas/Volume4D'
        ovn:
          $ref: '#/components/schemas/EntityOVN'
        key:
          $ref: '#/components/schemas/Key'
        state:
          $ref: '#/components/schemas/OperationState'
        callbacks:
          $ref: '#/components/schemas/OperationCallbacks'
        subscription_id:
          description: |-
            The ID of an existing Subscription that the USS will use to keep the operator informed about
            updates to relevant airspace information.  If this field is not provided, then the
            `subscription_callbacks` field must be provided in order to provide notification capability
            for the Operation.  The Subscription specified by this ID must cover at least the area over
            which this Operation is conducted.
          allOf:
          - $ref: '#/components/schemas/EntityUUID'
        subscription_callbacks:
          description: |-
            If an existing Subscription is not specified in `subscription_id`, then the necessary
            information to create an implicit Subscription must be provided in this field.  Both
            URLs must be specified.
          allOf:
          - $ref: '#/components/schemas/SubscriptionCallbacks'

    GetOperationReferenceResponse:
      description: |-
        Response to DSS request for the OperationReference with the given ID.
      required:
      - operation_reference
      type: object
      properties:
        operation_reference:
          $ref: '#/components/schemas/OperationReference'

    UpdateOperationReferenceResponse:
      description: |-
        Response to a request to create, update, or delete an OperationReference
        in the DSS.
      required:
      - subscribers
      type: object
      properties:
        subscribers:
          description: |-
            DSS subscribers that this client now has the obligation to
            notify of the Operation changes just made.  This client must call POST
            for each provided URL according to the `/uss/operations/{id}` path API.
          type: array
          items:
            $ref: '#/components/schemas/SubscriberToNotify'
        operation_reference:
          $ref: '#/components/schemas/OperationReference'

    SearchOperationReferenceResponse:
      description: Response to DSS query for OperationReferences in an area of interest.
      required:
      - operation_references
      type: object
      properties:
        operation_references:
          description: OperationReferences in the area of interest.
          type: array
          items:
            $ref: '#/components/schemas/OperationReference'


    QueryConstraintDetailsURL:
      description: |-
        The base URL of a USS implementation of (at least) the GET Constraint details portion of the USS-USS API.
        Per the USS-USS API, the full URL to retrieve the details of a Constraint with a particular {id} can
        be constructed by appending `/v1/constraints/{id}` to this base URL.  Accordingly, this URL may
        not have a trailing '/' character.  See `GET /v1/constraints/{id}` in the USS-USS API for more information.
      type: string
      example: 'https://uss.com/utm'

    NotifyConstraintDetailsURL:
      description: |-
        The base URL of a USS implementation of (at least) the PUT Constraint details portion of the USS-USS API.
        Per the USS-USS API, the full URL to notify the implementing USS of updated details for a Constraint
        with a particular {id} can be constructed by appending `/v1/constraints/{id}` to this base URL.
        Accordingly, this URL may not have a trailing '/' character.  See `PUT /v1/constraints/{id}` and
        `DELETE /v1/constraints/{id}` in the USS-USS API for more information.
      type: string
      example: 'https://uss.com/utm'
      
    ConstraintCallbacks:
      description: |-
        Endpoints that should be called when an applicable event occurs.
      required:
      - query_details_url
      - notify_feedback_url
      type: object
      properties:
        query_details_url:
          $ref: '#/components/schemas/QueryConstraintDetailsURL'
        notify_feedback_url:
          $ref: '#/components/schemas/ReportsBaseURL'

    ConstraintReference:
      description: A ConstraintReference (area in which a Constraint is present, along
        with other high-level information, but no details).  The DSS reports only
        these references and clients must exchange details and additional information
        peer-to-peer.
      required:
      - id
      - time_start
      - time_end
      - callbacks
      type: object
      properties:
        id:
          $ref: '#/components/schemas/EntityUUID'
        ovn:
          description: |-
            Opaque version number of this Constraint.  Populated only when the ConstraintReference
            is owned by the USS retrieving it.  Not populated when the ConstraintReference is not
            owned by the USS retrieving it (instead, the USS must obtain the OVN from the details
            retrieved from the owning USS).
          allOf:
          - $ref: '#/components/schemas/EntityOVN'
        owner:
          description: Created by the DSS and based on creating client’s ID (via access
            token).  Used for restricting mutation and deletion transactions to the entity owner.
          type: string
          example: 'uss1'
        time_start:
          $ref: '#/components/schemas/TimeWithUnits'
        time_end:
          $ref: '#/components/schemas/TimeWithUnits'
        callbacks:
          $ref: '#/components/schemas/ConstraintCallbacks'

    PutConstraintReferenceParameters:
      description: Parameters for a request to create/update a ConstraintReference in the
        DSS.
      required:
      - extents
      - callbacks
      type: object
      properties:
        extents:
          $ref: '#/components/schemas/Volume4D'
        callbacks:
          $ref: '#/components/schemas/ConstraintCallbacks'

    GetConstraintReferenceResponse:
      description: Response to DSS request for the ConstraintReference with the given
        ID.
      required:
      - constraint_reference
      type: object
      properties:
        constraint_reference:
          $ref: '#/components/schemas/ConstraintReference'

    ChangeConstraintReferenceResponse:
      description: Response to a request to create, update, or delete a ConstraintReference.
        in the DSS.
      required:
      - subscribers
      type: object
      properties:
        subscribers:
          description: DSS subscribers that this client now has the obligation to
            notify of the Constraint changes just made.  This client must call POST
            for each provided URL according to the `/uss/constraints/{id}` path API.
          type: array
          items:
            $ref: '#/components/schemas/SubscriberToNotify'
        constraint_reference:
          $ref: '#/components/schemas/ConstraintReference'

    SearchConstraintReferencesResponse:
      description: Response to DSS query for ConstraintReferences in an area of interest.
      required:
      - constraint_references
      type: object
      properties:
        constraint_references:
          description: ConstraintReferences in the area of interest.
          type: array
          items:
            $ref: '#/components/schemas/ConstraintReference'


    EntityReference:
      description: Reference to a generic Entity known to the DSS.
      type: object
      properties:
        operation_reference:
          $ref: '#/components/schemas/OperationReference'
        constraint_reference:
          $ref: '#/components/schemas/ConstraintReference'


    ReportsBaseURL:
      description: |-
        The base URL of a USS implementation of (at least) the PUT reports portion of the USS-USS API.
        Per the USS-USS API, the full URL to notify the implementing USS of an error report with a
        particular {id} can be constructed by appending `/v1/reports/{id}` to this base URL.
        Accordingly, this URL may not have a trailing '/' character.  See `POST /v1/reports/{id}` in
        the USS-USS API for more information.
      type: string
      example: 'https://uss.com/utm'


    AirspaceConflictResponse:
      description: Data provided when an airspace conflict was encountered.
      type: object
      properties:
        message:
          description: Human-readable message indicating what error occurred and/or
            why.
          type: string
        entity_conflicts:
          description: List of Entity references for which current proof of knowledge
            was not provided.  If this field is present and contains elements, the
            calling USS should query the details URLs for these Entities to obtain
            their details and correct OVNs.  The OVNs can be used to update
            the key, at which point the USS may retry this call.
          type: array
          items:
            $ref: '#/components/schemas/EntityReference'

    MakeReportParameters:
      description: Parameters of a message informing the DSS of a potential peer USS issue.
      required:
        - url_endpoint
        - response_code
        - problem
        - timestamp
      type: object
      properties:
        url_endpoint:
          type: string
          description: URL for request that resulted in an error.
        headers:
          description: Set of headers included in request that resulted in an error.
          type: array
          items:
            type: string
        body:
          description: Base64-encoded body content sent in request that resulted in an error.
          type: string
        response_code:
          type: integer
          format: int32
          description: HTTP response code encountered in error response.
        response_body:
          type: string
          description: Base64-encoded body content received in response that was in error.
        problem:
          type: string
          description: Human-readable description of the problem with the response.
        timestamp:
          $ref: '#/components/schemas/TimeWithUnits'


paths:
  #
  # DSS Endpoint: OPERATIONS
  #

  /v1/operations:
    summary: Query all Operations in the DSS that intersect with a specified geographic area, altitude-range, and time-range.
    description: "Interface to Operation references in the DSS."

    get:
      tags:
      - "Operations"
      security:
      - Authority:
        - utm.read.operations
      summary: Retrieve all Operations (references) in the specified area/volume/time from the DSS.
      parameters:
      - name: point
        description: |+
          Geographical vertex specification for search query. Specified as: 'point=[{LONGITUDE},{LATITUDE}]'. Units are degrees.

          Used to define the search area, specified in one of two ways:
          (a) POLYGON: THREE (minimum) 'point' values are required. For example: 'point=[{LON1},{LAT1}]&point=[{LON2},{LAT2}],point=[{LON3},{LAT3}]'

          (b) CIRCLE: ONE 'point' value is required to specify the centerpoint, and ONE associated 'radius' parameter. For example: 'point=[{LON1},{LAT1}]&radius={METERS}'
        schema:
          $ref: '#/components/schemas/LonLatPair'
        in: query
        required: true
      - name: radius
        description: |-
          Radius of circular geographical area (only used when specifying a circular area).
          Requires ONE accompanying 'point' parameter to specify the centerpoint of the circle.
        schema:
          $ref: '#/components/schemas/Radius'
        in: query
        required: false
      - name: earliest
        description: |-
          Optional start-time bound for the query.
          All Entities that are INACTIVE BEFORE this time will be excluded from the results.
        schema:
          $ref: '#/components/schemas/Time'
        in: query
        required: false
      - name: latest
        description: |-
          Optional end-time bound for the query.
          All Entities that are ACTIVE AFTER this time will be excluded from the results.
        schema:
          $ref: '#/components/schemas/Time'
        in: query
        required: false
      - name: lower
        description: |-
          (Optional) lower-altitude bound for the query.
          All Entities that have a LOWER upper-altitude bound will be excluded from the results.
        schema:
          $ref: '#/components/schemas/Altitude'
        in: query
        required: false
      - name: upper
        description: |-
          (Optional) lower-altitude bound for the query.
          All Entities that have a HIGHER lower-altitude bound will be excluded from the results.
        schema:
          $ref: '#/components/schemas/Altitude'
        in: query
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchOperationReferenceResponse'
          description: Operations were successfully retrieved.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: One or more input parameters were missing or invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bearer access token was not provided in Authorization header,
            token could not be decoded, or token was invalid.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The access token was decoded successfully but did not include
            a scope appropriate to this endpoint.
        "413":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The requested area was too large.

  /v1/operations/{id}:
    summary: CRUD endpoint for a specified Operation (reference) in the DSS.
    parameters:
    - name: id
      description: EntityUUID of the Operation.
      schema:
        $ref: '#/components/schemas/EntityUUID'
      in: path
      required: true

    get:
      tags:
      - "Operations"
      security:
      - Authority:
        - utm.read.operations
      summary: Retrieve the specified Operation (reference) from the DSS.
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetOperationReferenceResponse'
          description: Operation was retrieved successfully.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: One or more input parameters were missing or invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bearer access token was not provided in Authorization header,
            token could not be decoded, or token was invalid.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The access token was decoded successfully but did not include
            a scope appropriate to this endpoint.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The requested Entity could not be found.

    put:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutOperationReferenceParameters'
        required: true
      tags:
      - "Operations"
      security:
      - Authority:
        - utm.write.operations
      summary: Create/Update the specified Operation (reference) in the DSS.
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateOperationReferenceResponse'
          description: An Operation was created successfully in the DSS.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: |-
            * One or more input parameters were missing or invalid.
            * The request attempted to mutate the Operation in a disallowed way.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bearer access token was not provided in Authorization header,
            token could not be decoded, or token was invalid.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The access token was decoded successfully but did not include
            a scope appropriate to this endpoint.
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AirspaceConflictResponse'
          description: |-
            * The provided key did not prove knowledge of all current and relevant airspace Entities
            * An Operation with the specified ID already exists.
            * Despite repeated attempts, the DSS was unable to complete the update because of other simultaneous changes.
        "413":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The area of the Operation is too large.

    delete:
      tags:
        - "Operations"
      security:
        - Authority:
          - utm.write.operations
      summary: Remove the specified Operation (reference) from the DSS.
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateOperationReferenceResponse'
          description: The specified Operation was successfully removed from the DSS.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: |-
              * One or more input parameters were missing or invalid.
              * The request attempted to mutate the Operation in a disallowed way.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bearer access token was not provided in Authorization header,
              token could not be decoded, or token was invalid.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The access token was decoded successfully but did not include
              a scope appropriate to this endpoint.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The requested Entity could not be found.

  #
  # DSS Enpoint: CONSTRAINTS
  #

  /v1/constraints:
    summary: Query all Constraints in the DSS that intersect with a specified area/volume/time.
    description: ""

    get:
      tags:
      - "Constraints"
      security:
      - Authority:
        - utm.read.constraints
      summary: Retrieve all Constraints (references) in the specified area/volume from the DSS.
      parameters:
      - name: point
        description: |+
          Geographical vertex specification for search query. Specified as: 'point=[{LONGITUDE},{LATITUDE}]'. Units are degrees.

          Used to define the search area, specified in one of two ways:
          (a) POLYGON: THREE (minimum) 'point' values are required. For example: 'point=[{LON1},{LAT1}]&point=[{LON2},{LAT2}],point=[{LON3},{LAT3}]'

          (b) CIRCLE: ONE 'point' value is required to specify the centerpoint, and ONE associated 'radius' parameter. For example: 'point=[{LON1},{LAT1}]&radius={METERS}'
        schema:
          $ref: '#/components/schemas/LonLatPair'
        in: query
        required: true
      - name: radius
        description: |-
          Optional radius of circular gregraphical area.
          ONE required accompanying 'point' parameter to specify the centerpoint of the circle.
        schema:
          $ref: '#/components/schemas/Radius'
        in: query
        required: false
      - name: earliest
        description: |-
          Optional start-time bound for the query.
          All Entities that are INACTIVE BEFORE this time will be excluded from the results.
        schema:
          $ref: '#/components/schemas/Time'
        in: query
        required: false
      - name: latest
        description: |-
          Optional end-time bound for the query.
          All Entities that are ACTIVE AFTER this time will be excluded from the results.
        schema:
          $ref: '#/components/schemas/Time'
        in: query
        required: false
      - name: lower
        description: |-
          (Optional) lower-altitude bound for the query.
          All Entities that have a LOWER upper-altitude bound will be excluded from the results.
        schema:
          $ref: '#/components/schemas/Altitude'
        in: query
        required: false
      - name: upper
        description: |-
          (Optional) lower-altitude bound for the query.
          All Entities that have a HIGHER lower-altitude bound will be excluded from the results.
        schema:
          $ref: '#/components/schemas/Altitude'
        in: query
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchConstraintReferencesResponse'
          description: Constraints were successfully retrieved.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: One or more input parameters were missing or invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bearer access token was not provided in Authorization header,
            token could not be decoded, or token was invalid.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The access token was decoded successfully but did not include
            a scope appropriate to this endpoint.
        "413":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The requested area was too large.

  /v1/constraints/{id}:
    parameters:
    - name: id
      description: EntityUUID of the Constraint.
      schema:
        $ref: '#/components/schemas/EntityUUID'
      in: path
      required: true
    summary: CRUD endpoint for a specified Constraint in the DSS.

    get:
      tags:
      - "Constraints"
      security:
      - Authority:
        - utm.read.constraints
      summary: Retrieve the specified Constraint (reference) from the DSS.
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetConstraintReferenceResponse'
          description: Constraint was retrieved successfully.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: One or more input parameters were missing or invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bearer access token was not provided in Authorization header,
            token could not be decoded, or token was invalid.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The access token was decoded successfully but did not include
            a scope appropriate to this endpoint.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The requested Entity could not be found.

    put:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutConstraintReferenceParameters'
        required: true
      tags:
      - "Constraints"
      security:
      - Authority:
        - utm.write.constraints
      summary: Create/Update the specified Constraint in the DSS.
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChangeConstraintReferenceResponse'
          description: A Constraint was created successfully in the DSS.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: |-
            * One or more input parameters were missing or invalid.
            * The request attempted to mutate the Constraint in a disallowed way.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bearer access token was not provided in Authorization header,
            token could not be decoded, or token was invalid.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The access token was decoded successfully but did not include
            a scope appropriate to this endpoint.
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: |-
            * A Constraint with the specified ID already exists.
            * Despite repeated attempts, the DSS was unable to complete the update because of other simultaneous changes.
        "413":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The area of the Operation is too large.

    delete:
      tags:
      - "Constraints"
      security:
        - Authority:
          - utm.write.constraints
      summary: Delete the specified Constraint from the DSS.
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChangeConstraintReferenceResponse'
          description: The Constraint was successfully removed from the DSS.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: |-
              * One or more input parameters were missing or invalid.
              * The request attempted to mutate the Constraint in a disallowed way.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bearer access token was not provided in Authorization header,
              token could not be decoded, or token was invalid.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The access token was decoded successfully but did not include
              a scope appropriate to this endpoint.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The requested Entity could not be found.
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: |-
              * A Constraint with the specified ID already exists.
              * Despite repeated attempts, the DSS was unable to complete the update because of other simultaneous changes.

  #
  # DSS Endpoint: SUBSCRIPTIONS
  #

  /v1/subscriptions:
    summary: Subscriptions for airspace updates to a volume of interest.

    get:
      tags:
      - "Subscriptions"
      security:
      - Authority:
        - utm.read.subscriptions
      description: |-
        Retrieve Subscriptions intersecting an area of interest.  Subscription
        notifications are only triggered by (and contain full information of) changes to,
        creation of, or deletion of, Entities referenced by or stored in the DSS;
        they do not involve any data transfer (such as remote ID telemetry updates) apart
        from Entity information.

        Note that this parameter is a JSON object (in the 'request-body'). Note that either
        or both of the 'altitude' and 'time' values may be omitted from this parameter.

        Only Subscriptions belonging to the caller are returned.  This endpoint would be
        used if a USS lost track of Subscriptions they had created and/or wanted to resolve
        an error indicating that they had too many existing Subscriptions in an area.
      summary: Retrieve all Subscriptions (references) in the specified area/volume from the DSS.
      parameters:
      - name: point
        description: |+
          Geographical vertex specification for search query. Specified as: 'point=[{LONGITUDE},{LATITUDE}]'. Units are degrees.

          Used to define the search area, specified in one of two ways:
          (a) POLYGON: THREE (minimum) 'point' values are required. For example: 'point=[{LON1},{LAT1}]&point=[{LON2},{LAT2}],point=[{LON3},{LAT3}]'

          (b) CIRCLE: ONE 'point' value is required to specify the centerpoint, and ONE associated 'radius' parameter. For example: 'point=[{LON1},{LAT1}]&radius={METERS}'
        schema:
          $ref: '#/components/schemas/LonLatPair'
        in: query
        required: true
      - name: radius
        description: |-
          Optional radius of circular gregraphical area.
          ONE required accompanying 'point' parameter to specify the centerpoint of the circle.
        schema:
          $ref: '#/components/schemas/Radius'
        in: query
        required: false
      - name: earliest
        description: |-
          Optional start-time bound for the query.
          All Entities that are INACTIVE BEFORE this time will be excluded from the results.
        schema:
          $ref: '#/components/schemas/Time'
        in: query
        required: false
      - name: latest
        description: |-
          Optional end-time bound for the query.
          All Entities that are ACTIVE AFTER this time will be excluded from the results.
        schema:
          $ref: '#/components/schemas/Time'
        in: query
        required: false
      - name: lower
        description: |-
          (Optional) lower-altitude bound for the query.
          All Entities that have a LOWER upper-altitude bound will be excluded from the results.
        schema:
          $ref: '#/components/schemas/Altitude'
        in: query
        required: false
      - name: upper
        description: |-
          (Optional) lower-altitude bound for the query.
          All Entities that have a HIGHER lower-altitude bound will be excluded from the results.
        schema:
          $ref: '#/components/schemas/Altitude'
        in: query
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchSubscriptionsResponse'
          description: Subscriptions were retrieved successfully.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: One or more input parameters were missing or invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bearer access token was not provided in Authorization header,
            token could not be decoded, or token was invalid.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The access token was decoded successfully but did not include
            a scope appropriate to this endpoint.
        "413":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The requested area was too large.

  /v1/subscriptions/{id}:
    summary: Create/Update a specific Subscription (reference) in the DSS.
    parameters:
    - name: id
      description: SubscriptionUUID of the subscription of interest.
      schema:
        $ref: '#/components/schemas/SubscriptionUUID'
      in: path
      required: true

    get:
      tags:
      - "Subscriptions"
      security:
      - Authority:
        - utm.read.subscriptions
      summary: Retrieve the specified Subscription (reference) from the DSS.
      description: |-
        Retrieve a specific subscription.
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetSubscriptionResponse'
          description: Subscription information was retrieved successfully.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: One or more input parameters were missing or invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bearer access token was not provided in Authorization header,
            token could not be decoded, or token was invalid.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The access token was decoded successfully but did not include
            a scope appropriate to this endpoint.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: A Subscription with the specified ID was not found.

    put:
      security:
      - Authority:
        - utm.write.subscriptions
      summary: Create/Update the specified Subscription in the DSS.
      description: |-
        Create or update a subscription.  This call will fail if a Subscription with the same ID already exists.

        Subscription notifications are only triggered by (and contain full information of) changes to, creation of, or deletion of, Entities referenced by or stored in the DSS; they do not involve any data transfer (such as remote ID telemetry updates) apart from Entity information.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutSubscriptionParameters'
        required: true
      tags:
      - "Subscriptions"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PutSubscriptionResponse'
          description: A new Subscription was created successfully.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: |-
            * One or more input parameters were missing or invalid.
            * The request attempted to mutate the Subscription in a disallowed way.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bearer access token was not provided in Authorization header,
            token could not be decoded, or token was invalid.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: |-
            * The access token was decoded successfully but did not include a scope appropriate to this endpoint or the request.
            * An EntityType was specified in `types_filter` to which the scopes included in the access token do not provide access.
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: |-
            * A Subscription with the specified ID already exists and is owned by a different client.
            * Despite repeated attempts, the DSS was unable to complete the update because of other simultaneous changes.
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Client already has too many Subscriptions in the area where
            a new Subscription was requested.  To correct this problem, the client
            may query GET /subscriptions to see which Subscriptions are counting against
            their limit.  This problem should not generally be encountered because
            the Subscription limit should be above what any consumer that reasonably
            aggregates their Subscriptions should request.  But, a Subscription limit
            is necessary to bound performance requirements for DSS instances and would
            likely be hit by, e.g., a large remote ID display provider that created
            a Subscription for each of their display client users' views.

    delete:
      tags:
      - "Subscriptions"
      security:
        - Authority:
          - utm.write.subscriptions
      summary: Remove the specified Subscription from the DSS.
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteSubscriptionResponse'
          description: Subscription was successfully removed from DSS.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: One or more input parameters were missing or invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bearer access token was not provided in Authorization header,
              token could not be decoded, or token was invalid.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The access token was decoded successfully but did not include
              a scope appropriate to this endpoint.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: A Subscription with the specified ID was not found.

#
# DSS Endpoint: REPORT
#

  /v1/reports/{id}:
    summary: Report information about peer USS issues to the DSS.
    parameters:
    - name: id
      description: Unique identifier attached to this report.
      schema:
        $ref: '#/components/schemas/UUIDv4'
      in: path
      required: true

    post:
      security:
      - Authority:
        - utm.read.operations
        - utm.write.operations
        - utm.read.constraints
        - utm.write.constraints
        - utm.read.subscriptions
        - utm.write.subscriptions
      summary: Create a report of potential operational issues with a peer USS.
      description: Report peer USS issues. Data sent to this endpoint is archived.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MakeReportParameters'
        required: true
      tags:
      - "Reports"
      responses:
        "201":
          description: A new Report was created successfully (and archived).
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bearer access token was not provided in Authorization header,
            token could not be decoded, or token was invalid.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: |-
            * The access token was decoded successfully but did not include a scope appropriate to this endpoint or the request.
            * An EntityType was specified in `types_filter` to which the scopes included in the access token do not provide access.
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: |-
            * A Report with the specified ID already exists.
            * Despite repeated attempts, the DSS was unable to complete the update because of other simultaneous changes.
