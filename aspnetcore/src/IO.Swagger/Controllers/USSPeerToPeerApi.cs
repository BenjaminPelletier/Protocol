/*
 * UTM DSS/USS API
 *
 * Interface to Discovery and Synchronization Service (DSS) and UAS Service Suppliers (USS) used by participating clients to discover and interoperate.  Unless otherwise specified, fields specified in a message but not declared in the API shall be ignored.
 *
 * OpenAPI spec version: 1.0.0-oas3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;
using IO.Swagger.Security;
using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class USSPeerToPeerApiController : ControllerBase
    { 
        /// <summary>
        /// /uss/constraints/{id}
        /// </summary>
        /// <remarks>Retrieve the full details of a Constraint (from the entity owner).</remarks>
        /// <param name="id">EntityUUID of the Constraint.</param>
        /// <response code="200">The full Constraint information was retrieved successfully.</response>
        /// <response code="400">One or more input parameters were missing or invalid.</response>
        /// <response code="401">Bearer access token was not provided in Authorization header, token could not be decoded, or token was invalid.</response>
        /// <response code="403">The access token was decoded successfully but did not include a scope appropriate to this endpoint.</response>
        /// <response code="404">The requested Entity could not be found.</response>
        [HttpGet]
        [Route("/v1/uss/constraints/{id}")]
        [ValidateModelState]
        [SwaggerOperation("V1UssConstraintsIdGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(GetConstraintResponse), description: "The full Constraint information was retrieved successfully.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "One or more input parameters were missing or invalid.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ErrorResponse), description: "Bearer access token was not provided in Authorization header, token could not be decoded, or token was invalid.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ErrorResponse), description: "The access token was decoded successfully but did not include a scope appropriate to this endpoint.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "The requested Entity could not be found.")]
        public virtual IActionResult V1UssConstraintsIdGet([FromRoute][Required]EntityUUID id)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(GetConstraintResponse));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"constraint\" : {\n    \"reference\" : {\n      \"owner\" : \"uss_owner\",\n      \"feedback_url\" : \"https://my_utm_uss.com/feedback\",\n      \"time_start\" : \"\",\n      \"ovn\" : \"\",\n      \"id\" : \"\",\n      \"time_end\" : \"\",\n      \"details_url\" : \"https://my_utm_uss.com/constraints\"\n    },\n    \"details\" : {\n      \"volumes\" : [ null, null ],\n      \"exempt_operations\" : [ \"\", \"\" ]\n    }\n  }\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<GetConstraintResponse>(exampleJson)
                        : default(GetConstraintResponse);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// /uss/constraints/{id}
        /// </summary>
        /// <remarks>Publish new information about a Constraint to the host of this endpoint (usually because of instructions from the DSS triggered by a subscription).</remarks>
        /// <param name="body"></param>
        /// <param name="id">EntityUUID of the Constraint.</param>
        /// <response code="204">New or updated full Constraint information received successfully.</response>
        /// <response code="400">* One or more parameters were missing or invalid. * The Entity could not be parsed, or contains illegal data.</response>
        /// <response code="401">Bearer access token was not provided in Authorization header, token could not be decoded, or token was invalid.</response>
        /// <response code="403">* The access token was decoded successfully but did not include a scope appropriate to this endpoint. * The client identified in the access token is not the owner of this Entity according to the receiving client&#x27;s records.</response>
        /// <response code="409">The Entity version specified in this message is lower than a previously-received notification, or identical to a previously-received notification and the Entity is different.</response>
        [HttpPost]
        [Route("/v1/uss/constraints/{id}")]
        [ValidateModelState]
        [SwaggerOperation("V1UssConstraintsIdPost")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "* One or more parameters were missing or invalid. * The Entity could not be parsed, or contains illegal data.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ErrorResponse), description: "Bearer access token was not provided in Authorization header, token could not be decoded, or token was invalid.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ErrorResponse), description: "* The access token was decoded successfully but did not include a scope appropriate to this endpoint. * The client identified in the access token is not the owner of this Entity according to the receiving client&#x27;s records.")]
        [SwaggerResponse(statusCode: 409, type: typeof(ErrorResponse), description: "The Entity version specified in this message is lower than a previously-received notification, or identical to a previously-received notification and the Entity is different.")]
        public virtual IActionResult V1UssConstraintsIdPost([FromBody]PostConstraintNotificationParameters body, [FromRoute][Required]EntityUUID id)
        { 
            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 409 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(409, default(ErrorResponse));

            throw new NotImplementedException();
        }

        /// <summary>
        /// /uss/feedback/{id}
        /// </summary>
        /// <remarks>Notify USS of an error encountered that might otherwise go unnoticed.</remarks>
        /// <param name="body"></param>
        /// <param name="id">ID of the feedback.</param>
        /// <response code="204">Feedback received successfully.</response>
        /// <response code="400">* One or more parameters were missing or invalid. * The feedback could not be parsed, or contains illegal data.</response>
        /// <response code="401">Bearer access token was not provided in Authorization header, token could not be decoded, or token was invalid.</response>
        /// <response code="403">* The access token was decoded successfully but did not include a scope appropriate to this endpoint.</response>
        /// <response code="409">The Entity version specified in this message is lower than a previously-received notification, or identical to a previously-received notification and the Entity is different.</response>
        [HttpPut]
        [Route("/v1/uss/feedback/{id}")]
        [ValidateModelState]
        [SwaggerOperation("V1UssFeedbackIdPut")]
        [SwaggerResponse(statusCode: 400, type: typeof(FeedbackURL), description: "* One or more parameters were missing or invalid. * The feedback could not be parsed, or contains illegal data.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ErrorResponse), description: "Bearer access token was not provided in Authorization header, token could not be decoded, or token was invalid.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ErrorResponse), description: "* The access token was decoded successfully but did not include a scope appropriate to this endpoint.")]
        [SwaggerResponse(statusCode: 409, type: typeof(ErrorResponse), description: "The Entity version specified in this message is lower than a previously-received notification, or identical to a previously-received notification and the Entity is different.")]
        public virtual IActionResult V1UssFeedbackIdPut([FromBody]PutFeedbackParameters body, [FromRoute][Required]UUIDv4 id)
        { 
            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(FeedbackURL));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 409 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(409, default(ErrorResponse));

            throw new NotImplementedException();
        }

        /// <summary>
        /// /uss/operations/{id}
        /// </summary>
        /// <remarks>Retrieve full details of an Operation (directly from the entity owner).</remarks>
        /// <param name="id">EntityUUID for this Operation (matches Operation identifier).</param>
        /// <response code="200">The full Operation information was retrieved successfully.</response>
        /// <response code="400">One or more input parameters were missing or invalid.</response>
        /// <response code="401">Bearer access token was not provided in Authorization header, token could not be decoded, or token was invalid.</response>
        /// <response code="403">The access token was decoded successfully but did not include a scope appropriate to this endpoint.</response>
        /// <response code="404">The requested Entity could not be found.</response>
        [HttpGet]
        [Route("/v1/uss/operations/{id}")]
        [ValidateModelState]
        [SwaggerOperation("V1UssOperationsIdGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(GetOperationResponse), description: "The full Operation information was retrieved successfully.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "One or more input parameters were missing or invalid.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ErrorResponse), description: "Bearer access token was not provided in Authorization header, token could not be decoded, or token was invalid.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ErrorResponse), description: "The access token was decoded successfully but did not include a scope appropriate to this endpoint.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "The requested Entity could not be found.")]
        public virtual IActionResult V1UssOperationsIdGet([FromRoute][Required]EntityUUID id)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(GetOperationResponse));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"operation\" : {\n    \"reference\" : {\n      \"owner\" : \"uss_owner\",\n      \"feedback_url\" : \"https://my_utm_uss.com/feedback\",\n      \"time_start\" : \"\",\n      \"ovn\" : \"\",\n      \"uss_may_be_down\" : true,\n      \"disabled\" : true,\n      \"id\" : \"\",\n      \"time_end\" : \"\",\n      \"details_url\" : \"https://my_utm_uss.com/operations\",\n      \"priority\" : 0\n    },\n    \"details\" : {\n      \"volumes\" : [ {\n        \"volume\" : \"\",\n        \"time_start\" : \"\",\n        \"time_end\" : \"\"\n      }, {\n        \"volume\" : \"\",\n        \"time_start\" : \"\",\n        \"time_end\" : \"\"\n      } ],\n      \"state\" : \"Proposed\"\n    }\n  }\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<GetOperationResponse>(exampleJson)
                        : default(GetOperationResponse);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// /uss/operations/{id}
        /// </summary>
        /// <remarks>Push details of an Operation directly to a peer USS (usually because interaction with a DSS triggered this action).</remarks>
        /// <param name="body"></param>
        /// <param name="id">EntityUUID for this Operation (matches Operation identifier).</param>
        /// <response code="204">New or updated full Operation information received successfully.</response>
        /// <response code="400">* One or more parameters were missing or invalid. * The Entity could not be parsed, or contains illegal data.</response>
        /// <response code="401">Bearer access token was not provided in Authorization header, token could not be decoded, or token was invalid.</response>
        /// <response code="403">* The access token was decoded successfully but did not include a scope appropriate to this endpoint. * The client identified in the access token is not the owner of this Entity according to the receiving client&#x27;s records.</response>
        /// <response code="409">The Entity version specified in this message is lower than a previously-received notification, or identical to a previously-received notification and the Entity is different.</response>
        [HttpPost]
        [Route("/v1/uss/operations/{id}")]
        [ValidateModelState]
        [SwaggerOperation("V1UssOperationsIdPost")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "* One or more parameters were missing or invalid. * The Entity could not be parsed, or contains illegal data.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ErrorResponse), description: "Bearer access token was not provided in Authorization header, token could not be decoded, or token was invalid.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ErrorResponse), description: "* The access token was decoded successfully but did not include a scope appropriate to this endpoint. * The client identified in the access token is not the owner of this Entity according to the receiving client&#x27;s records.")]
        [SwaggerResponse(statusCode: 409, type: typeof(ErrorResponse), description: "The Entity version specified in this message is lower than a previously-received notification, or identical to a previously-received notification and the Entity is different.")]
        public virtual IActionResult V1UssOperationsIdPost([FromBody]PostOperationNotificationParameters body, [FromRoute][Required]EntityUUID id)
        { 
            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 409 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(409, default(ErrorResponse));

            throw new NotImplementedException();
        }
    }
}
