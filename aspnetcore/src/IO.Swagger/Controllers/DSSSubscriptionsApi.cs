/*
 * UTM DSS/USS API
 *
 * Interface to Discovery and Synchronization Service (DSS) and UAS Service Suppliers (USS) used by participating clients to discover and interoperate.  Unless otherwise specified, fields specified in a message but not declared in the API shall be ignored.
 *
 * OpenAPI spec version: 1.0.0-oas3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;
using IO.Swagger.Security;
using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class DSSSubscriptionsApiController : ControllerBase
    { 
        /// <summary>
        /// /dss/subscriptions
        /// </summary>
        /// <remarks>Retrieve subscriptions intersecting an area of interest.  Subscription notifications are only triggered by (and contain full information of) changes to, creation of, or deletion of, Entities referenced by or stored in the DSS; they do not involve any data transfer (such as remote ID telemetry updates) apart from Entity information.  Only Subscriptions belonging to the caller are returned.  This endpoint would be used if a USS lost track of Subscriptions they had created and/or wanted to resolve an error indicating that they had too many existing Subscriptions in an area.</remarks>
        /// <response code="200">Subscriptions were retrieved successfully.</response>
        /// <response code="400">One or more input parameters were missing or invalid.</response>
        /// <response code="401">Bearer access token was not provided in Authorization header, token could not be decoded, or token was invalid.</response>
        /// <response code="403">The access token was decoded successfully but did not include a scope appropriate to this endpoint.</response>
        /// <response code="413">The requested area was too large.</response>
        [HttpGet]
        [Route("/v1/dss/subscriptions")]
        [ValidateModelState]
        [SwaggerOperation("V1DssSubscriptionsGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(SearchSubscriptionsResponse), description: "Subscriptions were retrieved successfully.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "One or more input parameters were missing or invalid.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ErrorResponse), description: "Bearer access token was not provided in Authorization header, token could not be decoded, or token was invalid.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ErrorResponse), description: "The access token was decoded successfully but did not include a scope appropriate to this endpoint.")]
        [SwaggerResponse(statusCode: 413, type: typeof(ErrorResponse), description: "The requested area was too large.")]
        public virtual IActionResult V1DssSubscriptionsGet()
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(SearchSubscriptionsResponse));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 413 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(413, default(ErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"subscriptions\" : [ {\n    \"owner\" : \"uss_owner\",\n    \"time_start\" : \"\",\n    \"callbacks\" : {\n      \"constraint_url\" : \"\",\n      \"operation_url\" : \"\"\n    },\n    \"notification_index\" : 0,\n    \"id\" : \"\",\n    \"time_end\" : \"\",\n    \"version\" : \"version\"\n  }, {\n    \"owner\" : \"uss_owner\",\n    \"time_start\" : \"\",\n    \"callbacks\" : {\n      \"constraint_url\" : \"\",\n      \"operation_url\" : \"\"\n    },\n    \"notification_index\" : 0,\n    \"id\" : \"\",\n    \"time_end\" : \"\",\n    \"version\" : \"version\"\n  } ]\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<SearchSubscriptionsResponse>(exampleJson)
                        : default(SearchSubscriptionsResponse);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// /dss/subscriptions/{id}
        /// </summary>
        /// <remarks>Remove a particular subscription.</remarks>
        /// <param name="id">SubscriptionUUID of the subscription of interest.</param>
        /// <response code="200">Subscription was successfully removed from DSS.</response>
        /// <response code="400">One or more input parameters were missing or invalid.</response>
        /// <response code="401">Bearer access token was not provided in Authorization header, token could not be decoded, or token was invalid.</response>
        /// <response code="403">The access token was decoded successfully but did not include a scope appropriate to this endpoint.</response>
        /// <response code="404">A Subscription with the specified ID was not found.</response>
        [HttpDelete]
        [Route("/v1/dss/subscriptions/{id}")]
        [ValidateModelState]
        [SwaggerOperation("V1DssSubscriptionsIdDelete")]
        [SwaggerResponse(statusCode: 200, type: typeof(DeleteSubscriptionResponse), description: "Subscription was successfully removed from DSS.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "One or more input parameters were missing or invalid.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ErrorResponse), description: "Bearer access token was not provided in Authorization header, token could not be decoded, or token was invalid.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ErrorResponse), description: "The access token was decoded successfully but did not include a scope appropriate to this endpoint.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "A Subscription with the specified ID was not found.")]
        public virtual IActionResult V1DssSubscriptionsIdDelete([FromRoute][Required]SubscriptionUUID id)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(DeleteSubscriptionResponse));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"subscription\" : \"\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<DeleteSubscriptionResponse>(exampleJson)
                        : default(DeleteSubscriptionResponse);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// /dss/subscriptions/{id}
        /// </summary>
        /// <remarks>Create a subscription.  This call will fail if a Subscription with the same ID already exists.  Subscription notifications are only triggered by (and contain full information of) changes to, creation of, or deletion of, Entities referenced by or stored in the DSS; they do not involve any data transfer (such as remote ID telemetry updates) apart from Entity information.</remarks>
        /// <param name="id">SubscriptionUUID of the subscription of interest.</param>
        /// <response code="200">Subscription information was retrieved successfully.</response>
        /// <response code="400">One or more input parameters were missing or invalid.</response>
        /// <response code="401">Bearer access token was not provided in Authorization header, token could not be decoded, or token was invalid.</response>
        /// <response code="403">The access token was decoded successfully but did not include a scope appropriate to this endpoint.</response>
        /// <response code="404">A Subscription with the specified ID was not found.</response>
        [HttpGet]
        [Route("/v1/dss/subscriptions/{id}")]
        [ValidateModelState]
        [SwaggerOperation("V1DssSubscriptionsIdGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(GetSubscriptionResponse), description: "Subscription information was retrieved successfully.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "One or more input parameters were missing or invalid.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ErrorResponse), description: "Bearer access token was not provided in Authorization header, token could not be decoded, or token was invalid.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ErrorResponse), description: "The access token was decoded successfully but did not include a scope appropriate to this endpoint.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "A Subscription with the specified ID was not found.")]
        public virtual IActionResult V1DssSubscriptionsIdGet([FromRoute][Required]SubscriptionUUID id)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(GetSubscriptionResponse));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"subscription\" : {\n    \"owner\" : \"uss_owner\",\n    \"time_start\" : \"\",\n    \"callbacks\" : {\n      \"constraint_url\" : \"\",\n      \"operation_url\" : \"\"\n    },\n    \"notification_index\" : 0,\n    \"id\" : \"\",\n    \"time_end\" : \"\",\n    \"version\" : \"version\"\n  }\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<GetSubscriptionResponse>(exampleJson)
                        : default(GetSubscriptionResponse);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Create a subscription.  This call will fail if a Subscription with the same ID already exists.  Subscription notifications are only triggered by (and contain full information of) changes to, creation of, or deletion of, Entities referenced by or stored in the DSS; they do not involve any data transfer (such as remote ID telemetry updates) apart from Entity information.</remarks>
        /// <param name="body"></param>
        /// <param name="id">SubscriptionUUID of the subscription of interest.</param>
        /// <response code="200">A new Subscription was created successfully.</response>
        /// <response code="400">* One or more input parameters were missing or invalid. * The request attempted to mutate the Subscription in a disallowed way.</response>
        /// <response code="401">Bearer access token was not provided in Authorization header, token could not be decoded, or token was invalid.</response>
        /// <response code="403">* The access token was decoded successfully but did not include a scope appropriate to this endpoint or the request. * An EntityType was specified in &#x60;types_filter&#x60; to which the scopes included in the access token do not provide access.</response>
        /// <response code="409">* A Subscription with the specified ID already exists and is owned by a different client. * Despite repeated attempts, the DSS was unable to complete the update because of other simultaneous changes.</response>
        /// <response code="429">Client already has too many Subscriptions in the area where a new Subscription was requested.  To correct this problem, the client may query GET /subscriptions to see which Subscriptions are counting against their limit.  This problem should not generally be encountered because the Subscription limit should be above what any consumer that reasonably aggregates their Subscriptions should request.  But, a Subscription limit is necessary to bound performance requirements for DSS instances and would likely be hit by, e.g., a large remote ID display provider that created a Subscription for each of their display client users&#x27; views.</response>
        [HttpPut]
        [Route("/v1/dss/subscriptions/{id}")]
        [ValidateModelState]
        [SwaggerOperation("V1DssSubscriptionsIdPut")]
        [SwaggerResponse(statusCode: 200, type: typeof(PutSubscriptionResponse), description: "A new Subscription was created successfully.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "* One or more input parameters were missing or invalid. * The request attempted to mutate the Subscription in a disallowed way.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ErrorResponse), description: "Bearer access token was not provided in Authorization header, token could not be decoded, or token was invalid.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ErrorResponse), description: "* The access token was decoded successfully but did not include a scope appropriate to this endpoint or the request. * An EntityType was specified in &#x60;types_filter&#x60; to which the scopes included in the access token do not provide access.")]
        [SwaggerResponse(statusCode: 409, type: typeof(ErrorResponse), description: "* A Subscription with the specified ID already exists and is owned by a different client. * Despite repeated attempts, the DSS was unable to complete the update because of other simultaneous changes.")]
        [SwaggerResponse(statusCode: 429, type: typeof(ErrorResponse), description: "Client already has too many Subscriptions in the area where a new Subscription was requested.  To correct this problem, the client may query GET /subscriptions to see which Subscriptions are counting against their limit.  This problem should not generally be encountered because the Subscription limit should be above what any consumer that reasonably aggregates their Subscriptions should request.  But, a Subscription limit is necessary to bound performance requirements for DSS instances and would likely be hit by, e.g., a large remote ID display provider that created a Subscription for each of their display client users&#x27; views.")]
        public virtual IActionResult V1DssSubscriptionsIdPut([FromBody]CreateSubscriptionParameters body, [FromRoute][Required]SubscriptionUUID id)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(PutSubscriptionResponse));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 409 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(409, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 429 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(429, default(ErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"operations\" : [ {\n    \"reference\" : {\n      \"owner\" : \"uss_owner\",\n      \"feedback_url\" : \"https://my_utm_uss.com/feedback\",\n      \"time_start\" : \"\",\n      \"ovn\" : \"\",\n      \"uss_may_be_down\" : true,\n      \"disabled\" : true,\n      \"id\" : \"\",\n      \"time_end\" : \"\",\n      \"details_url\" : \"https://my_utm_uss.com/operations\",\n      \"priority\" : 0\n    },\n    \"details\" : {\n      \"volumes\" : [ {\n        \"volume\" : \"\",\n        \"time_start\" : \"\",\n        \"time_end\" : \"\"\n      }, {\n        \"volume\" : \"\",\n        \"time_start\" : \"\",\n        \"time_end\" : \"\"\n      } ],\n      \"state\" : \"Proposed\"\n    }\n  }, {\n    \"reference\" : {\n      \"owner\" : \"uss_owner\",\n      \"feedback_url\" : \"https://my_utm_uss.com/feedback\",\n      \"time_start\" : \"\",\n      \"ovn\" : \"\",\n      \"uss_may_be_down\" : true,\n      \"disabled\" : true,\n      \"id\" : \"\",\n      \"time_end\" : \"\",\n      \"details_url\" : \"https://my_utm_uss.com/operations\",\n      \"priority\" : 0\n    },\n    \"details\" : {\n      \"volumes\" : [ {\n        \"volume\" : \"\",\n        \"time_start\" : \"\",\n        \"time_end\" : \"\"\n      }, {\n        \"volume\" : \"\",\n        \"time_start\" : \"\",\n        \"time_end\" : \"\"\n      } ],\n      \"state\" : \"Proposed\"\n    }\n  } ],\n  \"subscription\" : \"\",\n  \"constraints\" : [ {\n    \"reference\" : {\n      \"owner\" : \"uss_owner\",\n      \"feedback_url\" : \"https://my_utm_uss.com/feedback\",\n      \"time_start\" : \"\",\n      \"ovn\" : \"\",\n      \"id\" : \"\",\n      \"time_end\" : \"\",\n      \"details_url\" : \"https://my_utm_uss.com/constraints\"\n    },\n    \"details\" : {\n      \"volumes\" : [ null, null ],\n      \"exempt_operations\" : [ \"\", \"\" ]\n    }\n  }, {\n    \"reference\" : {\n      \"owner\" : \"uss_owner\",\n      \"feedback_url\" : \"https://my_utm_uss.com/feedback\",\n      \"time_start\" : \"\",\n      \"ovn\" : \"\",\n      \"id\" : \"\",\n      \"time_end\" : \"\",\n      \"details_url\" : \"https://my_utm_uss.com/constraints\"\n    },\n    \"details\" : {\n      \"volumes\" : [ null, null ],\n      \"exempt_operations\" : [ \"\", \"\" ]\n    }\n  } ]\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<PutSubscriptionResponse>(exampleJson)
                        : default(PutSubscriptionResponse);            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
