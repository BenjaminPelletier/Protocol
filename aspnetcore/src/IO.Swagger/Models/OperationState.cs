/*
 * UTM DSS/USS API
 *
 * Interface to Discovery and Synchronization Service (DSS) and UAS Service Suppliers (USS) used by participating clients to discover and interoperate.  Unless otherwise specified, fields specified in a message but not declared in the API shall be ignored.
 *
 * OpenAPI spec version: 1.0.0-oas3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
        /// <summary>
        /// State of an Operation.  `Proposed`: This Operation has not yet been fully deconflicted with other Entities, but the owning USS is pursuing negotiations to complete deconfliction.  `Accepted`: This Operation was fully deconflicted from other Entities at the time it changed to this state, but no aircraft associated with it are active yet.  `Activated`: One or more aircraft associated with this Operation are, or will imminently be, in flight.
        /// </summary>
        /// <value>State of an Operation.  `Proposed`: This Operation has not yet been fully deconflicted with other Entities, but the owning USS is pursuing negotiations to complete deconfliction.  `Accepted`: This Operation was fully deconflicted from other Entities at the time it changed to this state, but no aircraft associated with it are active yet.  `Activated`: One or more aircraft associated with this Operation are, or will imminently be, in flight.</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum OperationState
        {
            /// <summary>
            /// Enum ProposedEnum for Proposed
            /// </summary>
            [EnumMember(Value = "Proposed")]
            ProposedEnum = 0,
            /// <summary>
            /// Enum AcceptedEnum for Accepted
            /// </summary>
            [EnumMember(Value = "Accepted")]
            AcceptedEnum = 1,
            /// <summary>
            /// Enum ActivatedEnum for Activated
            /// </summary>
            [EnumMember(Value = "Activated")]
            ActivatedEnum = 2        }
}
