/*
 * UTM DSS/USS API
 *
 * Interface to Discovery and Synchronization Service (DSS) and UAS Service Suppliers (USS) used by participating clients to discover and interoperate.  Unless otherwise specified, fields specified in a message but not declared in the API shall be ignored.
 *
 * OpenAPI spec version: 1.0.0-oas3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// Reference to a generic Entity known to the DSS.
    /// </summary>
    [DataContract]
    public partial class EntityReference : IEquatable<EntityReference>
    { 
        /// <summary>
        /// Operation (reference) data
        /// </summary>
        /// <value>Operation (reference) data</value>
        [DataMember(Name="operation_reference")]
        public  OperationReference { get; set; }

        /// <summary>
        /// Constraint (reference) data
        /// </summary>
        /// <value>Constraint (reference) data</value>
        [DataMember(Name="constraint_reference")]
        public  ConstraintReference { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EntityReference {\n");
            sb.Append("  OperationReference: ").Append(OperationReference).Append("\n");
            sb.Append("  ConstraintReference: ").Append(ConstraintReference).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((EntityReference)obj);
        }

        /// <summary>
        /// Returns true if EntityReference instances are equal
        /// </summary>
        /// <param name="other">Instance of EntityReference to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EntityReference other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    OperationReference == other.OperationReference ||
                    OperationReference != null &&
                    OperationReference.SequenceEqual(other.OperationReference)
                ) && 
                (
                    ConstraintReference == other.ConstraintReference ||
                    ConstraintReference != null &&
                    ConstraintReference.SequenceEqual(other.ConstraintReference)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (OperationReference != null)
                    hashCode = hashCode * 59 + OperationReference.GetHashCode();
                    if (ConstraintReference != null)
                    hashCode = hashCode * 59 + ConstraintReference.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(EntityReference left, EntityReference right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(EntityReference left, EntityReference right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
