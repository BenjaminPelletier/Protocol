/*
 * UTM DSS/USS API
 *
 * Interface to Discovery and Synchronization Service (DSS) and UAS Service Suppliers (USS) used by participating clients to discover and interoperate.  Unless otherwise specified, fields specified in a message but not declared in the API shall be ignored.
 *
 * OpenAPI spec version: 1.0.0-oas3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// Contiguous block of geographic spacetime.
    /// </summary>
    [DataContract]
    public partial class Volume4D : IEquatable<Volume4D>
    { 
        /// <summary>
        /// Constant spatial extent of this volume.
        /// </summary>
        /// <value>Constant spatial extent of this volume.</value>
        [Required]
        [DataMember(Name="volume")]
        public AnyOfVolume4DVolume Volume { get; set; }

        /// <summary>
        /// Beginning time of this volume.  RFC 3339 format, per OpenAPI specification.
        /// </summary>
        /// <value>Beginning time of this volume.  RFC 3339 format, per OpenAPI specification.</value>
        [DataMember(Name="time_start")]
        public  TimeStart { get; set; }

        /// <summary>
        /// End time of this volume.  RFC 3339 format, per OpenAPI specification.
        /// </summary>
        /// <value>End time of this volume.  RFC 3339 format, per OpenAPI specification.</value>
        [DataMember(Name="time_end")]
        public  TimeEnd { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Volume4D {\n");
            sb.Append("  Volume: ").Append(Volume).Append("\n");
            sb.Append("  TimeStart: ").Append(TimeStart).Append("\n");
            sb.Append("  TimeEnd: ").Append(TimeEnd).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Volume4D)obj);
        }

        /// <summary>
        /// Returns true if Volume4D instances are equal
        /// </summary>
        /// <param name="other">Instance of Volume4D to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Volume4D other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Volume == other.Volume ||
                    Volume != null &&
                    Volume.SequenceEqual(other.Volume)
                ) && 
                (
                    TimeStart == other.TimeStart ||
                    TimeStart != null &&
                    TimeStart.SequenceEqual(other.TimeStart)
                ) && 
                (
                    TimeEnd == other.TimeEnd ||
                    TimeEnd != null &&
                    TimeEnd.SequenceEqual(other.TimeEnd)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Volume != null)
                    hashCode = hashCode * 59 + Volume.GetHashCode();
                    if (TimeStart != null)
                    hashCode = hashCode * 59 + TimeStart.GetHashCode();
                    if (TimeEnd != null)
                    hashCode = hashCode * 59 + TimeEnd.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Volume4D left, Volume4D right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Volume4D left, Volume4D right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
