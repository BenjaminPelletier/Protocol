/*
 * UTM DSS/USS API
 *
 * Interface to Discovery and Synchronization Service (DSS) and UAS Service Suppliers (USS) used by participating clients to discover and interoperate.  Unless otherwise specified, fields specified in a message but not declared in the API shall be ignored.
 *
 * OpenAPI spec version: 1.0.0-oas3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// A three-dimensional geographic volume consisting of a vertically-extruded polygon.
    /// </summary>
    [DataContract]
    public partial class Volume3D : IEquatable<Volume3D>
    { 
        /// <summary>
        /// Projection of this volume onto the earth&#x27;s surface.
        /// </summary>
        /// <value>Projection of this volume onto the earth&#x27;s surface.</value>
        [Required]
        [DataMember(Name="footprint")]
        public AnyOfVolume3DFootprint Footprint { get; set; }

        /// <summary>
        /// Lower bounding altitude of this volume.
        /// </summary>
        /// <value>Lower bounding altitude of this volume.</value>
        [DataMember(Name="altitude_lower")]
        public  AltitudeLower { get; set; }

        /// <summary>
        /// Upper bounding altitude of this volume.
        /// </summary>
        /// <value>Upper bounding altitude of this volume.</value>
        [DataMember(Name="altitude_upper")]
        public  AltitudeUpper { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Volume3D {\n");
            sb.Append("  Footprint: ").Append(Footprint).Append("\n");
            sb.Append("  AltitudeLower: ").Append(AltitudeLower).Append("\n");
            sb.Append("  AltitudeUpper: ").Append(AltitudeUpper).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Volume3D)obj);
        }

        /// <summary>
        /// Returns true if Volume3D instances are equal
        /// </summary>
        /// <param name="other">Instance of Volume3D to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Volume3D other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Footprint == other.Footprint ||
                    Footprint != null &&
                    Footprint.SequenceEqual(other.Footprint)
                ) && 
                (
                    AltitudeLower == other.AltitudeLower ||
                    AltitudeLower != null &&
                    AltitudeLower.SequenceEqual(other.AltitudeLower)
                ) && 
                (
                    AltitudeUpper == other.AltitudeUpper ||
                    AltitudeUpper != null &&
                    AltitudeUpper.SequenceEqual(other.AltitudeUpper)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Footprint != null)
                    hashCode = hashCode * 59 + Footprint.GetHashCode();
                    if (AltitudeLower != null)
                    hashCode = hashCode * 59 + AltitudeLower.GetHashCode();
                    if (AltitudeUpper != null)
                    hashCode = hashCode * 59 + AltitudeUpper.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Volume3D left, Volume3D right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Volume3D left, Volume3D right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
