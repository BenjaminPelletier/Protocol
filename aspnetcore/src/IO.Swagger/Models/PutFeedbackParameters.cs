/*
 * UTM DSS/USS API
 *
 * Interface to Discovery and Synchronization Service (DSS) and UAS Service Suppliers (USS) used by participating clients to discover and interoperate.  Unless otherwise specified, fields specified in a message but not declared in the API shall be ignored.
 *
 * OpenAPI spec version: 1.0.0-oas3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// Parameters of a message informing a USS of an error that the USS would otherwise not notice.
    /// </summary>
    [DataContract]
    public partial class PutFeedbackParameters : IEquatable<PutFeedbackParameters>
    { 
        /// <summary>
        /// URL for request that resulted in an error.
        /// </summary>
        /// <value>URL for request that resulted in an error.</value>
        [Required]
        [DataMember(Name="endpoint_url")]
        public string EndpointUrl { get; set; }

        /// <summary>
        /// Set of headers included in request that resulted in an error.
        /// </summary>
        /// <value>Set of headers included in request that resulted in an error.</value>
        [DataMember(Name="headers")]
        public List<string> Headers { get; set; }

        /// <summary>
        /// Base64-encoded body content sent in request that resulted in an error.
        /// </summary>
        /// <value>Base64-encoded body content sent in request that resulted in an error.</value>
        [DataMember(Name="body")]
        public string Body { get; set; }

        /// <summary>
        /// HTTP response code encountered in error response.
        /// </summary>
        /// <value>HTTP response code encountered in error response.</value>
        [Required]
        [DataMember(Name="response_code")]
        public int? ResponseCode { get; set; }

        /// <summary>
        /// Base64-encoded body content received in response that was in error.
        /// </summary>
        /// <value>Base64-encoded body content received in response that was in error.</value>
        [DataMember(Name="response_body")]
        public string ResponseBody { get; set; }

        /// <summary>
        /// Human-readable description of the problem with the response.
        /// </summary>
        /// <value>Human-readable description of the problem with the response.</value>
        [Required]
        [DataMember(Name="problem")]
        public string Problem { get; set; }

        /// <summary>
        /// When the error was observed.  RFC 3339 format, per OpenAPI specification.
        /// </summary>
        /// <value>When the error was observed.  RFC 3339 format, per OpenAPI specification.</value>
        [Required]
        [DataMember(Name="timestamp")]
        public  Timestamp { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PutFeedbackParameters {\n");
            sb.Append("  EndpointUrl: ").Append(EndpointUrl).Append("\n");
            sb.Append("  Headers: ").Append(Headers).Append("\n");
            sb.Append("  Body: ").Append(Body).Append("\n");
            sb.Append("  ResponseCode: ").Append(ResponseCode).Append("\n");
            sb.Append("  ResponseBody: ").Append(ResponseBody).Append("\n");
            sb.Append("  Problem: ").Append(Problem).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((PutFeedbackParameters)obj);
        }

        /// <summary>
        /// Returns true if PutFeedbackParameters instances are equal
        /// </summary>
        /// <param name="other">Instance of PutFeedbackParameters to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PutFeedbackParameters other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    EndpointUrl == other.EndpointUrl ||
                    EndpointUrl != null &&
                    EndpointUrl.Equals(other.EndpointUrl)
                ) && 
                (
                    Headers == other.Headers ||
                    Headers != null &&
                    Headers.SequenceEqual(other.Headers)
                ) && 
                (
                    Body == other.Body ||
                    Body != null &&
                    Body.Equals(other.Body)
                ) && 
                (
                    ResponseCode == other.ResponseCode ||
                    ResponseCode != null &&
                    ResponseCode.Equals(other.ResponseCode)
                ) && 
                (
                    ResponseBody == other.ResponseBody ||
                    ResponseBody != null &&
                    ResponseBody.Equals(other.ResponseBody)
                ) && 
                (
                    Problem == other.Problem ||
                    Problem != null &&
                    Problem.Equals(other.Problem)
                ) && 
                (
                    Timestamp == other.Timestamp ||
                    Timestamp != null &&
                    Timestamp.SequenceEqual(other.Timestamp)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (EndpointUrl != null)
                    hashCode = hashCode * 59 + EndpointUrl.GetHashCode();
                    if (Headers != null)
                    hashCode = hashCode * 59 + Headers.GetHashCode();
                    if (Body != null)
                    hashCode = hashCode * 59 + Body.GetHashCode();
                    if (ResponseCode != null)
                    hashCode = hashCode * 59 + ResponseCode.GetHashCode();
                    if (ResponseBody != null)
                    hashCode = hashCode * 59 + ResponseBody.GetHashCode();
                    if (Problem != null)
                    hashCode = hashCode * 59 + Problem.GetHashCode();
                    if (Timestamp != null)
                    hashCode = hashCode * 59 + Timestamp.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(PutFeedbackParameters left, PutFeedbackParameters right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(PutFeedbackParameters left, PutFeedbackParameters right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
