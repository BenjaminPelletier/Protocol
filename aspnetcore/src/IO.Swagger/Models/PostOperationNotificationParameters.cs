/*
 * UTM DSS/USS API
 *
 * Interface to Discovery and Synchronization Service (DSS) and UAS Service Suppliers (USS) used by participating clients to discover and interoperate.  Unless otherwise specified, fields specified in a message but not declared in the API shall be ignored.
 *
 * OpenAPI spec version: 1.0.0-oas3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// Parameters of a message informing of new full information for an Operation.  Pushed (by a client, not the DSS) directly to clients with subscriptions when another client makes a change to airspace within a cell with a subscription.
    /// </summary>
    [DataContract]
    public partial class PostOperationNotificationParameters : IEquatable<PostOperationNotificationParameters>
    { 
        /// <summary>
        /// Full information for Operation that the notifying client changed or created.  If this field is populated, the Operation was created or updated.  If this field is not populated, the Operation was deleted.
        /// </summary>
        /// <value>Full information for Operation that the notifying client changed or created.  If this field is populated, the Operation was created or updated.  If this field is not populated, the Operation was deleted.</value>
        [DataMember(Name="operation")]
        public AnyOfPostOperationNotificationParametersOperation Operation { get; set; }

        /// <summary>
        /// Subscription(s) prompting this notification.
        /// </summary>
        /// <value>Subscription(s) prompting this notification.</value>
        [Required]
        [DataMember(Name="subscriptions")]
        public List<SubscriptionState> Subscriptions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PostOperationNotificationParameters {\n");
            sb.Append("  Operation: ").Append(Operation).Append("\n");
            sb.Append("  Subscriptions: ").Append(Subscriptions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((PostOperationNotificationParameters)obj);
        }

        /// <summary>
        /// Returns true if PostOperationNotificationParameters instances are equal
        /// </summary>
        /// <param name="other">Instance of PostOperationNotificationParameters to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PostOperationNotificationParameters other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Operation == other.Operation ||
                    Operation != null &&
                    Operation.SequenceEqual(other.Operation)
                ) && 
                (
                    Subscriptions == other.Subscriptions ||
                    Subscriptions != null &&
                    Subscriptions.SequenceEqual(other.Subscriptions)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Operation != null)
                    hashCode = hashCode * 59 + Operation.GetHashCode();
                    if (Subscriptions != null)
                    hashCode = hashCode * 59 + Subscriptions.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(PostOperationNotificationParameters left, PostOperationNotificationParameters right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(PostOperationNotificationParameters left, PostOperationNotificationParameters right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
