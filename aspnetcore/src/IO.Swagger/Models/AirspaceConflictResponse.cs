/*
 * UTM DSS/USS API
 *
 * Interface to Discovery and Synchronization Service (DSS) and UAS Service Suppliers (USS) used by participating clients to discover and interoperate.  Unless otherwise specified, fields specified in a message but not declared in the API shall be ignored.
 *
 * OpenAPI spec version: 1.0.0-oas3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// Data provided when an airspace conflict was encountered.
    /// </summary>
    [DataContract]
    public partial class AirspaceConflictResponse : IEquatable<AirspaceConflictResponse>
    { 
        /// <summary>
        /// Human-readable message indicating what error occurred and/or why.
        /// </summary>
        /// <value>Human-readable message indicating what error occurred and/or why.</value>
        [DataMember(Name="message")]
        public string Message { get; set; }

        /// <summary>
        /// List of Entity references for which current proof of knowledge was not provided.  If this field is present and contains elements, the calling USS should query the details URLs for these Entities to obtain their details and correct OVNs.  The OVNs can be used to update the key, at which point the USS may retry this call.
        /// </summary>
        /// <value>List of Entity references for which current proof of knowledge was not provided.  If this field is present and contains elements, the calling USS should query the details URLs for these Entities to obtain their details and correct OVNs.  The OVNs can be used to update the key, at which point the USS may retry this call.</value>
        [DataMember(Name="entity_conflicts")]
        public List<EntityReference> EntityConflicts { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AirspaceConflictResponse {\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  EntityConflicts: ").Append(EntityConflicts).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((AirspaceConflictResponse)obj);
        }

        /// <summary>
        /// Returns true if AirspaceConflictResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of AirspaceConflictResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AirspaceConflictResponse other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Message == other.Message ||
                    Message != null &&
                    Message.Equals(other.Message)
                ) && 
                (
                    EntityConflicts == other.EntityConflicts ||
                    EntityConflicts != null &&
                    EntityConflicts.SequenceEqual(other.EntityConflicts)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Message != null)
                    hashCode = hashCode * 59 + Message.GetHashCode();
                    if (EntityConflicts != null)
                    hashCode = hashCode * 59 + EntityConflicts.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(AirspaceConflictResponse left, AirspaceConflictResponse right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(AirspaceConflictResponse left, AirspaceConflictResponse right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
