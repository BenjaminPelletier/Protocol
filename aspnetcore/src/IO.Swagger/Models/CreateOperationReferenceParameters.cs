/*
 * UTM DSS/USS API
 *
 * Interface to Discovery and Synchronization Service (DSS) and UAS Service Suppliers (USS) used by participating clients to discover and interoperate.  Unless otherwise specified, fields specified in a message but not declared in the API shall be ignored.
 *
 * OpenAPI spec version: 1.0.0-oas3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// Parameters for a request to create an OperationReference in the DSS.
    /// </summary>
    [DataContract]
    public partial class CreateOperationReferenceParameters : IEquatable<CreateOperationReferenceParameters>
    { 
        /// <summary>
        /// The bounding spacetime extents of this OperationReference.  End time must be specified.  If start time is not specified, it will be set to the current time.  Start times in the past should be rejected by the DSS, except that it may adjust very recent start times to the current time.
        /// </summary>
        /// <value>The bounding spacetime extents of this OperationReference.  End time must be specified.  If start time is not specified, it will be set to the current time.  Start times in the past should be rejected by the DSS, except that it may adjust very recent start times to the current time.</value>
        [Required]
        [DataMember(Name="extents")]
        public AnyOfCreateOperationReferenceParametersExtents Extents { get; set; }

        /// <summary>
        /// Gets or Sets DetailsUrl
        /// </summary>
        [Required]
        [DataMember(Name="details_url")]
        public OperationDetailsURL DetailsUrl { get; set; }

        /// <summary>
        /// Gets or Sets FeedbackUrl
        /// </summary>
        [DataMember(Name="feedback_url")]
        public FeedbackURL FeedbackUrl { get; set; }

        /// <summary>
        /// Gets or Sets Priority
        /// </summary>
        [Required]
        [DataMember(Name="priority")]
        public OperationPriority Priority { get; set; }

        /// <summary>
        /// Proof that the client is aware of all relevant Entities with the requirement that the client has deconflicted with all these Entities.  Relevant Entities for Operations consist of all Constraints, and Operations with equal or higher priority.
        /// </summary>
        /// <value>Proof that the client is aware of all relevant Entities with the requirement that the client has deconflicted with all these Entities.  Relevant Entities for Operations consist of all Constraints, and Operations with equal or higher priority.</value>
        [Required]
        [DataMember(Name="key")]
        public AnyOfCreateOperationReferenceParametersKey Key { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateOperationReferenceParameters {\n");
            sb.Append("  Extents: ").Append(Extents).Append("\n");
            sb.Append("  DetailsUrl: ").Append(DetailsUrl).Append("\n");
            sb.Append("  FeedbackUrl: ").Append(FeedbackUrl).Append("\n");
            sb.Append("  Priority: ").Append(Priority).Append("\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((CreateOperationReferenceParameters)obj);
        }

        /// <summary>
        /// Returns true if CreateOperationReferenceParameters instances are equal
        /// </summary>
        /// <param name="other">Instance of CreateOperationReferenceParameters to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateOperationReferenceParameters other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Extents == other.Extents ||
                    Extents != null &&
                    Extents.SequenceEqual(other.Extents)
                ) && 
                (
                    DetailsUrl == other.DetailsUrl ||
                    DetailsUrl != null &&
                    DetailsUrl.Equals(other.DetailsUrl)
                ) && 
                (
                    FeedbackUrl == other.FeedbackUrl ||
                    FeedbackUrl != null &&
                    FeedbackUrl.Equals(other.FeedbackUrl)
                ) && 
                (
                    Priority == other.Priority ||
                    Priority != null &&
                    Priority.Equals(other.Priority)
                ) && 
                (
                    Key == other.Key ||
                    Key != null &&
                    Key.SequenceEqual(other.Key)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Extents != null)
                    hashCode = hashCode * 59 + Extents.GetHashCode();
                    if (DetailsUrl != null)
                    hashCode = hashCode * 59 + DetailsUrl.GetHashCode();
                    if (FeedbackUrl != null)
                    hashCode = hashCode * 59 + FeedbackUrl.GetHashCode();
                    if (Priority != null)
                    hashCode = hashCode * 59 + Priority.GetHashCode();
                    if (Key != null)
                    hashCode = hashCode * 59 + Key.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(CreateOperationReferenceParameters left, CreateOperationReferenceParameters right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(CreateOperationReferenceParameters left, CreateOperationReferenceParameters right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
