/*
 * UTM DSS/USS API
 *
 * Interface to Discovery and Synchronization Service (DSS) and UAS Service Suppliers (USS) used by participating clients to discover and interoperate.  Unless otherwise specified, fields specified in a message but not declared in the API shall be ignored.
 *
 * OpenAPI spec version: 1.0.0-oas3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// Parameters of a message informing of new full information for a Constraint.  Pushed (by a client, not the DSS) directly to clients with subscriptions when another client makes a change to airspace within a cell with a subscription.
    /// </summary>
    [DataContract]
    public partial class PostConstraintNotificationParameters : IEquatable<PostConstraintNotificationParameters>
    { 
        /// <summary>
        /// Constraint that the notifying client changed or created.  If this field is populated, the Constraint was created or updated.  If this field is not populated, the Constraint was deleted.
        /// </summary>
        /// <value>Constraint that the notifying client changed or created.  If this field is populated, the Constraint was created or updated.  If this field is not populated, the Constraint was deleted.</value>
        [DataMember(Name="constraint")]
        public AnyOfPostConstraintNotificationParametersConstraint Constraint { get; set; }

        /// <summary>
        /// Subscription(s) prompting this notification.
        /// </summary>
        /// <value>Subscription(s) prompting this notification.</value>
        [Required]
        [DataMember(Name="subscriptions")]
        public List<SubscriptionState> Subscriptions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PostConstraintNotificationParameters {\n");
            sb.Append("  Constraint: ").Append(Constraint).Append("\n");
            sb.Append("  Subscriptions: ").Append(Subscriptions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((PostConstraintNotificationParameters)obj);
        }

        /// <summary>
        /// Returns true if PostConstraintNotificationParameters instances are equal
        /// </summary>
        /// <param name="other">Instance of PostConstraintNotificationParameters to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PostConstraintNotificationParameters other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Constraint == other.Constraint ||
                    Constraint != null &&
                    Constraint.SequenceEqual(other.Constraint)
                ) && 
                (
                    Subscriptions == other.Subscriptions ||
                    Subscriptions != null &&
                    Subscriptions.SequenceEqual(other.Subscriptions)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Constraint != null)
                    hashCode = hashCode * 59 + Constraint.GetHashCode();
                    if (Subscriptions != null)
                    hashCode = hashCode * 59 + Subscriptions.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(PostConstraintNotificationParameters left, PostConstraintNotificationParameters right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(PostConstraintNotificationParameters left, PostConstraintNotificationParameters right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
