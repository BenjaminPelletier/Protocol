# Copyright Amazon.com Inc. or its affiliates.
msc {
    a [label="Operator-1 (USS-1)"],b [label="Operator-2 (USS-2)"],c [label="Constraint-Owner (USS-3)"],d [label="DSS"];

    a note d [label="SETUP"];

    b abox d [label="[0.1] USS-2 creates an Operation in the DSS.\nNote that Key is 'null' as we are making a simplifying assumption that there are no overlapping Operations. Furthermore, assume no overlapping Operations."];

    b=>d [label="PUT DSS://operations/{id-op2} <volume(s), Key>"];
    b<<d [label="CREATED (201) <OVN>"];

    c abox d [label="[0.2] USS-3 creates an Constraint in the DSS. (No 'Key' is required).\nURLs of overlapping USS Operations are returned (USS-2 in this case)."];

    c:>d [label="PUT DSS://constraints/{id-con} <volume>"];
    c<<d [label="CREATED (201) <URLs, UUIDs>"];

    c abox b [label="[0.3] USS-3 pushes Constraint details to peers (returned in previous step)."];

    c=>b [label="PUT USS-2://constraints/{id-con} <volume>"];
    c<<b [label="OK (200)"];

    |||;
    a note d [label="EXAMPLE"];

    a abox d [label="[1] USS-1 defines a 'planning-volume' and uses this to create a 'subscription' to all future changes in the DSS that overlap (in time and space) with this volume. Existing overlaps (USS URLs and UUIDs) are returned immediately."];

    a:>d [label="PUT DSS://subscriptions/{id-sub1} <planning-volume>"];
    a<<d [label="CREATED (201) <URLs, UUIDs>"];

    a abox c [label="[2] USS-1 queries this initial set of USS URLs (Operations and Constraints) returned to form a (local) model of the airspace. (In the future, changes will be 'pushed' directly to USS-1)."];

    a:>b [label="GET USS-2://operations/{id-op2}"];
    a<<b [label="OK (200) <volume(s), OVN>"];

    a=>c [label="GET USS-3://constraints/{id-con}"];
    a<<c [label="OK (200) <volume>"];

    a abox d [label="[3] USS-1 will use this information to create de-conflicted Operation volume(s) and write this to the DSS. (Note: OVNs from overlapping Operations form the 'Key' and '{id-op1}' is the UUID USS-1 has picked for this Operation)"];

    a:>d [label="PUT DSS://operations/{id-op1} <volume, Key>"];
    a<<d [label="CREATED (201) <URLs>"];

    a abox b [label="[4] USS-1 now updates peer Operations that its own Operation is 'accepted'"];

    a:>b [label="PUT USS-2://operations/{id-op1} <operation-details>"];
    a<<b [label="CREATED (201)"];

    a=>b [label="PUT USS-2://operations/{id-op1} <flight-status: ACCEPTED>"];
    a<<b [label="OK (200)"];

    a abox b [label="[5] USS-1 flight starts..."];
    
    a=>b [label="PUT USS-2://operations/{id-op1} <flight-status: ACTIVE>"];
    a<<b [label="OK (200)"];

    a abox b [label="[6] ... and USS-1 flight completes."];

    a=>b [label="PUT USS-2://operations/{id-op1} <flight-status: COMPLETE>"];
    a<<b [label="OK (200)"];

    |||;
    a note d [label="CLEANUP"];
    a abox d [label="[7] USS-1 removes its Operation from the DSS. Note that there is no need to do this with peer USSs (i.e. no 'DELETE USS-2://operation/{id-op1}')"];

    a:>d [label="DELETE DSS://operations/{id-op1}"];
    a<<d [label="OK (200)"];

    a abox d [label="[8] USS-1 removes its Subscription from the DSS."];

    a=>d [label="DELETE DSS://subscriptions/{id-sub1}"];
    a<<d [label="OK (200)"];

    |||;
    b abox d [label="[9] USS-2 removes its Operation from the DSS."];

    b=>d [label="DELETE DSS://operations/{id-op2}"];
    b<<d [label="OK (200)"];

    |||;
    c abox d [label="[10] USS-3 removes its Constraint from the DSS. Since there are no overlapping Operations or Subscriptions, no notification to peers are needed."];

    c=>d [label="DELETE DSS://constraints/{id-con}"];
    c<<d [label="OK (200)"];
}
