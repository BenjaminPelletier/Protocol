---
openapi: 3.0.2
info:
  title: UTM DSS/USS API
  version: 0.0.1
  description: |-
    Interface to Discovery and Synchronization Service (DSS) and UAS Service Suppliers (USS) used by participating clients to discover and interoperate.

    Unless otherwise specified, fields specified in a message but not declared in the API shall be ignored.

security:
- Authority:
  - utm.read.operations
  - utm.write.operations
  - utm.read.constraints
  - utm.write.constraints
  - utm.read.subscriptions
  - utm.write.subscriptions

tags:
- name: "DSS Operations"
  description: Endpoints exposed by the DSS for interaction with Operation entities.
- name: "DSS Constraints"
  description: Endpoints exposed by the DSS for interaction with Constraint entities.
- name: "DSS Subscriptions"
  description: Endpoints exposed by the DSS for interaction with Subscription entities.

- name: "USS Peer-to-Peer"
  description: Endpoints exposed by each participating UTM-USS for peer-to-peer interaction.

#
#
#

components:
  schemas:
    
    DeconflictionKey:
      description: |
        Proof that a client has obtained the latest airspace content, used to ensure that write operations to the DSS occur only when the latest content is known (i.e. has been read). The client is required to pass a current DeconflictionKey constructed from information obtained with previous read operations and subsequent requests for full information, and optionally, subscription updates for deconflicted write operations to the DSS.  The contents of this data structure are generated by the client.
      type: object
      properties:
        ovns:
          anyOf:
          - $ref: '#/components/schemas/OVNDictionary'
          description: For each of a subset of Entities declared by the DSS in the
            area of interest, the OVN of the current version of the full information
            of that Entity.  This EntityOVN is provided by the client who defined
            the Entity, accompanying the full Entity definition data when that data
            is received.
        subscription:
          anyOf:
          - $ref: '#/components/schemas/SubscriptionUUID'
          description: If the client obtained the information in this DeconflictionKey
            via a subscription, this field is set to the ID of that subscription so
            the usage of subscriptions can be tracked and unused subscriptions can
            be removed.

    Token:
      anyOf:
      - $ref: '#/components/schemas/UUIDv4'
      description: Universally-unique identifier associated with a specific set of
        data.

    EntityOVN:
      title: EntityOVN
      description: A token associated with a particular UTM Entity+version created
        by the DSS upon creation or modification of an Entity reference and provided
        to the client creating or modifying the Entity reference.  The EntityOVN
        is stored privately by the DSS and then compared against entries in a Key
        provided to mutate the airspace.  The EntityOVN is also provided by
        the client whenever that client transmits the full information of the Entity
        (either via GET, or via a subscription notification).
      required:
      - token
      - version
      type: object
      properties:
        version:
          format: int32
          description: This version increases each time an Entity is modified.  If
            a client ever receives a subscription update with an EntityOVN for
            a particular EntityUUID that is smaller than the cached EntityOVN
            for that EntityUUID, that subscription update should be ignored.
          type: integer
        token:
          anyOf:
          - $ref: '#/components/schemas/Token'
          description: Unique value associated with a specific version of a specific
            Entity.  Token value may not be reused for any other Entity versions;
            it must change each time the Entity changes.

    OVNEntry:
      description: Mapping between an EntityUUID and an EntityOVN.
      required:
      - id
      - signature
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/EntityUUID'
          description: ""
        signature:
          allOf:
          - $ref: '#/components/schemas/EntityOVN'
          description: ""

    OVNDictionary:
      description: Collection of mappings between EntityUUID and EntityOVN.
      type: array
      items:
        $ref: '#/components/schemas/OVNEntry'

    Volume3D:
      description: A three-dimensional geographic volume consisting of a vertically-extruded
        polygon.
      required:
      - footprint
      type: object
      properties:
        footprint:
          anyOf:
          - $ref: '#/components/schemas/Polygon'
          description: Projection of this volume onto the earth's surface.
        altitude_lower:
          anyOf:
          - $ref: '#/components/schemas/Altitude'
          description: Lower bounding altitude of this volume.
        altitude_upper:
          anyOf:
          - $ref: '#/components/schemas/Altitude'
          description: Upper bounding altitude of this volume.

    Volume4D:
      description: Contiguous block of geographic spacetime.
      required:
      - volume
      type: object
      properties:
        volume:
          anyOf:
          - $ref: '#/components/schemas/Volume3D'
          description: Constant spatial extent of this volume.
        time_start:
          anyOf:
          - $ref: '#/components/schemas/Time'
          description: Beginning time of this volume.  RFC 3339 format, per OpenAPI
            specification.
        time_end:
          anyOf:
          - $ref: '#/components/schemas/Time'
          description: End time of this volume.  RFC 3339 format, per OpenAPI specification.

    GetSubscriptionResponse:
      description: Response to DSS request for the subscription with the given id.
      required:
      - subscription
      type: object
      properties:
        subscription:
          $ref: '#/components/schemas/Subscription'

    SearchSubscriptionsResponse:
      description: Response to DSS query for subscriptions in a particular area.
      required:
      - subscriptions
      type: object
      properties:
        subscriptions:
          description: Subscriptions that overlap the specified area.
          type: array
          items:
            $ref: '#/components/schemas/Subscription'

    
    Time:
      # REVISIT-- make this an object w/ units
      type: string
      format: date-time

    URL:
      description: Valid http or https URL.
      type: string

    SubscriptionNotificationIndex:
      format: int32
      description: Tracks the notifications sent for a subscription so the subscriber
        can detect missed notifications more easily.
      type: integer

    SubscriptionState:
      description: State of Subscription which is causing a notification to be
        sent.
      required:
      - subscription
      type: object
      properties:
        subscription_id:
          $ref: '#/components/schemas/SubscriptionUUID'
        notification_index:
          $ref: '#/components/schemas/SubscriptionNotificationIndex'

    UUIDv4:
      description: UUID v4.
      maxLength: 36
      minLength: 36
      type: string
      format: uuid
      example: 03e5572a-f733-49af-bc14-8a18bd53ee39

    Version:
      description: A version string used to reference an object at a particular point
        in time. Any updates to an object must contain the corresponding version to
        maintain idempotent updates.
      type: string

    EntityUUID:
      anyOf:
      - $ref: '#/components/schemas/UUIDv4'
      description: Universally-unique identifier for an Entity communicated through
        the DSS.  Formatted as UUIDv4.

    SubscriptionUUID:
      anyOf:
      - $ref: '#/components/schemas/UUIDv4'
      description: Universally-unique identifier for a Subscription communicated through
        the DSS.  Formatted as UUIDv4.

    ErrorResponse:
      description: Data provided when an off-nominal condition was encountered.
      type: object
      properties:
        message:
          description: Human-readable message indicating what error occurred and/or
            why.
          type: string

    DeleteSubscriptionResponse:
      description: Response for a successful request to delete an Subscription.
      required:
      - subscription
      type: object
      properties:
        subscription:
          anyOf:
          - $ref: '#/components/schemas/Subscription'
          description: The Subscription which was deleted.

    Latitude:
      format: double
      description: Degrees of latitude north of the equator, with reference to the
        WGS84 ellipsoid.
      maximum: 90
      exclusiveMaximum: false
      minimum: -90
      exclusiveMinimum: false
      type: number
      example: 34.123

    Longitude:
      format: double
      description: Degrees of longitude east of the Prime Meridian, with reference
        to the WGS84 ellipsoid.
      maximum: -180
      exclusiveMaximum: false
      minimum: 180
      exclusiveMinimum: false
      type: number
      example: -118.456

    LatLngPoint:
      description: Point on the earth's surface.
      required:
      - lat
      - lng
      type: object
      properties:
        lng:
          $ref: '#/components/schemas/Longitude'
        lat:
          $ref: '#/components/schemas/Latitude'

    Altitude:
      # REVISIT-- make this an object and add units!
      format: float
      description: An altitude, in meters, above the WGS84 ellipsoid.
      type: number
      example: 19.5

    Polygon:
      description: |-
        An enclosed area on the earth.
        The bounding edges of this polygon shall be the shortest paths between connected vertices.  This means, for instance, that the edge between two points both defined at a particular latitude is not generally contained at that latitude.
        The winding order shall be interpreted as the order which produces the smaller area.
        The path between two vertices shall be the shortest possible path between those vertices.
        Edges may not cross.
        Vertices may not be duplicated.  In particular, the final polygon vertex shall not be identical to the first vertex.
      required:
      - vertices
      type: object
      properties:
        vertices:
          minItems: 3
          type: array
          items:
            $ref: '#/components/schemas/LatLngPoint'

    SubscriberToNotify:
      description: Subscriber to notify of a creation/change/deletion of a change
        in the airspace.  This is provided by the DSS to a client changing the airspace,
        and it is the responsibility of the client changing the airspace (they will
        receive a set of these notification requests) to send a notification to each
        specified `url`.
      required:
      - subscriptions
      - url
      type: object
      properties:
        subscriptions:
          description: Subscription(s) prompting this notification.
          type: array
          items:
            $ref: '#/components/schemas/SubscriptionState'
        url:
          anyOf:
          - $ref: '#/components/schemas/URL'
          description: The endpoint that the client mutating the airspace should provide
            the update to.  API depends on the DSS action taken that triggered this
            notification request.

    PutSubscriptionResponse:
      description: Response for a request to create or update a subscription.
      required:
      - subscription
      type: object
      properties:
        operations:
          description: Operations in or near the subscription area
            at the time of creation/update, if `operation_url` callback
            was specified.
          type: array
          items:
            $ref: '#/components/schemas/Operation'
        constraints:
          description: Constraints in or near the subscription area
            at the time of creation/update, if `constraint_url` callback
            was specified.
          type: array
          items:
            $ref: '#/components/schemas/Constraint'
        subscription:
          anyOf:
          - $ref: '#/components/schemas/Subscription'
          description: Result of the operation on the subscription.

    CreateSubscriptionParameters:
      description: Parameters for a request to create a subscription in the DSS.
      required:
      - extents
      - callbacks
      type: object
      properties:
        extents:
          anyOf:
          - $ref: '#/components/schemas/Volume4D'
          description: |-
            The spacetime extents of the volume to subscribe to.

            This subscription will automatically be deleted after its end time if it has not been refreshed by then.  If end time is not specified, the value will be chosen automatically by the DSS.

            Note that some Entities triggering notifications may lie entirely outside the requested area.
        callbacks:
          $ref: '#/components/schemas/SubscriptionCallbacks'

    Subscription:
      description: Specification of a geographic area that a client is interested
        in on an ongoing basis (e.g., “planning area”).  Internal to the DSS.
      required:
      - id
      - url
      - notification_index
      - owner
      - version
      - callbacks
      type: object
      properties:
        id:
          anyOf:
          - $ref: '#/components/schemas/SubscriptionUUID'
          description: Unique identifier for this subscription.
        callbacks:
          $ref: '#/components/schemas/SubscriptionCallbacks'
        owner:
          description: Created by the DSS and based on creating client’s ID (via access
            token).  Used for restricting mutation and deletion operations to owner.
          type: string
          example: uss_owner
        notification_index:
          $ref: '#/components/schemas/SubscriptionNotificationIndex'
        time_start:
          anyOf:
          - $ref: '#/components/schemas/Time'
          description: If set, this Subscription will not generate any notifications
            before this time.  RFC 3339 format, per OpenAPI specification.
        time_end:
          anyOf:
          - $ref: '#/components/schemas/Time'
          description: If set, this subscription will be automatically removed after
            this time.  RFC 3339 format, per OpenAPI specification.
        version:
          $ref: '#/components/schemas/Version'

    OperationReference:
      description: An OperationReference (area in which an Operation is being conducted,
        along with other high-level information, but no details).  The DSS reports
        only these references and clients must exchange details and additional information
        peer-to-peer.
      required:
      - details_url
      - owner
      - time_start
      - time_end
      - id
      - priority
      type: object
      properties:
        id:
          anyOf:
            - $ref: '#/components/schemas/EntityUUID'
          description: Unique identifier for this OperationReference.
        details_url:
          $ref: '#/components/schemas/OperationDetailsURL'
        feedback_url:
          $ref: '#/components/schemas/FeedbackURL'
        owner:
          description: Created by the DSS and based on creating client’s ID (via access
            token).  Used for restricting mutation and deletion operations to owner.
          type: string
          example: uss_owner
        time_start:
          anyOf:
          - $ref: '#/components/schemas/Time'
          description: Beginning time of Operation.  RFC 3339 format, per OpenAPI
            specification.
        time_end:
          anyOf:
          - $ref: '#/components/schemas/Time'
          description: End time of Operation.  RFC 3339 format, per OpenAPI specification.
        ovn:
          anyOf:
          - $ref: '#/components/schemas/EntityOVN'
          description: Opaque version number of this OperationReference, used for updating or deleting the OperationReference.  Only populated by the DSS for OperationReferences owned by the requesting client.  Must be populated by a USS when notifying a subscriber of an altered Operation or providing full Operation information.
        priority:
          $ref: '#/components/schemas/OperationPriority'
        uss_may_be_down:
          type: boolean
          description: If specified as true by the DSS, the details for this Operation may not be accessible.  The OVN for this OperationReference may be omitted when deconflicting an Operation, at which point this Operation will be disabled.
        disabled:
          type: boolean
          description: If specified as true by the DSS, this Operation has been disabled and will not be permitted to transition to Activated.  This means aircraft for this Operation will not be permitted to fly pursuant to this Operation, so this Operation may be ignored when planning and its OVN does not need to be provided to prove relevant airspace knowledge.

    GetOperationReferenceResponse:
      description: Response to DSS request for the OperationReference with the given
        ID.
      required:
      - operation_reference
      type: object
      properties:
        operation_reference:
          $ref: '#/components/schemas/OperationReference'

    CreateOperationReferenceParameters:
      description: Parameters for a request to create an OperationReference in the
        DSS.
      required:
      - extents
      - details_url
      - priority
      - key
      type: object
      properties:
        extents:
          anyOf:
          - $ref: '#/components/schemas/Volume4D'
          description: The bounding spacetime extents of this OperationReference.  End
            time must be specified.  If start time is not specified, it will be set
            to the current time.  Start times in the past should be rejected by the
            DSS, except that it may adjust very recent start times to the current
            time.
        details_url:
          $ref: '#/components/schemas/OperationDetailsURL'
        feedback_url:
          $ref: '#/components/schemas/FeedbackURL'
        priority:
          $ref: '#/components/schemas/OperationPriority'
        key:
          anyOf:
          - $ref: '#/components/schemas/DeconflictionKey'
          description: Proof that the client is aware of all relevant Entities with the requirement that the client has deconflicted with all these Entities.  Relevant Entities for Operations consist of all Constraints, and Operations with equal or higher priority.

    Operation:
      description: Full description of a UTM Operation.
      required:
      - reference
      - details
      type: object
      properties:
        reference:
          $ref: '#/components/schemas/OperationReference'
        details:
          $ref: '#/components/schemas/OperationDetails'

    OperationDetails:
      description: Details of a UTM Operation. Note that this data is not stored in the DSS; only with the clients.
      required:
      - volumes
      type: object
      properties:
        volumes:
          description: Volumes that wholly contain the Operation while being as small
            as practical.
          minItems: 1
          type: array
          items:
            $ref: '#/components/schemas/Volume4D'
        state:
          $ref: '#/components/schemas/OperationState'

    SearchOperationReferenceResponse:
      description: Response to DSS query for OperationReferences in an area of interest.
      required:
      - operation_references
      type: object
      properties:
        operation_references:
          description: OperationReferences in the area of interest.
          type: array
          items:
            $ref: '#/components/schemas/OperationReference'

    PostOperationNotificationParameters:
      description: Parameters of a message informing of new full information for an
        Operation.  Pushed (by a client, not the DSS) directly to clients with subscriptions
        when another client makes a change to airspace within a cell with a subscription.
      required:
      - subscriptions
      type: object
      properties:
        operation:
          anyOf:
          - $ref: '#/components/schemas/Operation'
          description: |-
            Full information for Operation that the notifying client changed or created.

            If this field is populated, the Operation was created or updated.  If this field is not populated, the Operation was deleted.
        subscriptions:
          description: Subscription(s) prompting this notification.
          type: array
          items:
            $ref: '#/components/schemas/SubscriptionState'

    PutFeedbackParameters:
      description: Parameters of a message informing a USS of an error that the USS would otherwise not notice.
      required:
        - endpoint_url
        - response_code
        - problem
        - timestamp
      type: object
      properties:
        endpoint_url:
          type: string
          description: URL for request that resulted in an error.
        headers:
          description: Set of headers included in request that resulted in an error.
          type: array
          items:
            type: string
        body:
          description: Base64-encoded body content sent in request that resulted in an error.
          type: string
        response_code:
          type: integer
          format: int32
          description: HTTP response code encountered in error response.
        response_body:
          type: string
          description: Base64-encoded body content received in response that was in error.
        problem:
          type: string
          description: Human-readable description of the problem with the response.
        timestamp:
          anyOf:
          - $ref: '#/components/schemas/Time'
          description: When the error was observed.  RFC 3339 format, per OpenAPI
            specification.

    CreateConstraintReferenceParameters:
      description: Parameters for a request to create a ConstraintReference in the
        DSS.
      required:
      - extents
      - details_url
      type: object
      properties:
        extents:
          anyOf:
          - $ref: '#/components/schemas/Volume4D'
          description: The bounding spacetime extents of this ConstraintReference.  End
            time must be specified.  If start time is not specified, it will be set
            to the current time.  Start times in the past should be rejected by the
            DSS, except that it may adjust very recent start times to the current
            time.
        details_url:
          $ref: '#/components/schemas/ConstraintDetailsURL'
        feedback_url:
          $ref: '#/components/schemas/FeedbackURL'

    GetConstraintReferenceResponse:
      description: Response to DSS request for the ConstraintReference with the given
        ID.
      required:
      - constraint_reference
      type: object
      properties:
        constraint_reference:
          $ref: '#/components/schemas/ConstraintReference'

    ConstraintReference:
      description: A ConstraintReference (area in which a Constraint is present, along
        with other high-level information, but no details).  The DSS reports only
        these references and clients must exchange details and additional information
        peer-to-peer.
      required:
      - id
      - details_url
      - owner
      - time_start
      - time_end
      type: object
      properties:
        id:
          anyOf:
            - $ref: '#/components/schemas/EntityUUID'
          description: Unique identifier for this ConstraintReference.
        details_url:
          $ref: '#/components/schemas/ConstraintDetailsURL'
        feedback_url:
          $ref: '#/components/schemas/FeedbackURL'
        owner:
          description: Created by the DSS and based on creating client’s ID (via access
            token).  Used for restricting mutation and deletion operations to owner.
          type: string
          example: uss_owner
        time_start:
          anyOf:
          - $ref: '#/components/schemas/Time'
          description: Beginning time of Operation.  RFC 3339 format, per OpenAPI
            specification.
        time_end:
          anyOf:
          - $ref: '#/components/schemas/Time'
          description: End time of Operation.  RFC 3339 format, per OpenAPI specification.
        ovn:
          anyOf:
            - $ref: '#/components/schemas/EntityOVN'
          description: Opaque version number of this ConstraintReference, used for updating or deleting the ConstraintReference.  Only populated by the DSS for ConstraintReferences owned by the requesting client.  Must be populated by a USS when notifying a subscriber of an altered Constraint or providing full Constraint information.

    PostConstraintNotificationParameters:
      description: Parameters of a message informing of new full information for a
        Constraint.  Pushed (by a client, not the DSS) directly to clients with subscriptions
        when another client makes a change to airspace within a cell with a subscription.
      required:
      - subscriptions
      type: object
      properties:
        constraint:
          anyOf:
          - $ref: '#/components/schemas/Constraint'
          description: |-
            Constraint that the notifying client changed or created.

            If this field is populated, the Constraint was created or updated.  If this field is not populated, the Constraint was deleted.
        subscriptions:
          description: Subscription(s) prompting this notification.
          type: array
          items:
            $ref: '#/components/schemas/SubscriptionState'

    Constraint:
      description: Full specification of a UTM Constraint.
      required:
      - reference
      - details
      type: object
      properties:
        reference:
          $ref: '#/components/schemas/ConstraintReference'
        details:
          $ref: '#/components/schemas/ConstraintDetails'

    ConstraintDetails:
      description: Details of a UTM Constraint. Note that this data is
        not stored in the DSS; only with the clients.
      required:
      - volumes
      type: object
      properties:
        volumes:
          description: Volumes that wholly contain the Constraint while being as small
            as practical.
          minItems: 1
          type: array
          items:
            $ref: '#/components/schemas/Volume4D'
        exempt_operations:
          description: List of Operations exempt from this Constraint, if applicable.
          type: array
          items:
            $ref: '#/components/schemas/EntityUUID'

    ChangeConstraintReferenceResponse:
      description: Response to a request to create, update, or delete a ConstraintReference.
        in the DSS.
      required:
      - subscribers
      type: object
      properties:
        subscribers:
          description: DSS subscribers that this client now has the obligation to
            notify of the Constraint changes just made.  This client must call POST
            for each provided URL according to the `/uss/constraints/{id}` path API.
          type: array
          items:
            $ref: '#/components/schemas/SubscriberToNotify'
        constraint_reference:
          anyOf:
          - $ref: '#/components/schemas/ConstraintReference'
          description: Resulting ConstraintReference stored in DSS.  Omitted if and only if ConstraintReference was deleted.

    ChangeOperationReferenceResponse:
      description: Response to a request to create, update, or delete an OperationReference
        in the DSS.
      required:
      - subscribers
      type: object
      properties:
        subscribers:
          description: DSS subscribers that this client now has the obligation to
            notify of the Operation changes just made.  This client must call POST
            for each provided URL according to the `/uss/operations/{id}` path API.
          type: array
          items:
            $ref: '#/components/schemas/SubscriberToNotify'
        operation_reference:
          anyOf:
          - $ref: '#/components/schemas/OperationReference'
          description: Resulting OperationReference stored in DSS.  Omitted if and only if OperationReference was deleted.

    SearchConstraintReferencesResponse:
      description: Response to DSS query for ConstraintReferences in an area of interest.
      required:
      - constraint_references
      type: object
      properties:
        constraint_references:
          description: ConstraintReferences in the area of interest.
          type: array
          items:
            $ref: '#/components/schemas/ConstraintReference'

    EntityReference:
      description: Reference to a generic Entity known to the DSS.
      type: object
      properties:
        operation_reference:
          allOf:
          - $ref: '#/components/schemas/OperationReference'
          description: "Operation (reference) data"
        constraint_reference:
          allOf:
          - $ref: '#/components/schemas/ConstraintReference'
          description: "Constraint (reference) data"

    GetConstraintResponse:
      description: Response to peer request for the details of Operation with the
        given ID.
      required:
      - constraint
      type: object
      properties:
        constraint:
          $ref: '#/components/schemas/Constraint'

    GetOperationResponse:
      description: Response to peer request for the details of Operation with the given ID.
      required:
      - operation
      type: object
      properties:
        operation:
          $ref: '#/components/schemas/Operation'

    SubscriptionCallbacks:
      description: Endpoints that should be called when an applicable event occurs.  At
        least one field must be specified.
      type: object
      properties:
        operation_url:
          anyOf:
          - $ref: '#/components/schemas/OperationDetailsURL'
          description: If specified, other clients will be instructed by the DSS to
            call this endpoint when an Operation relevant to this Subscription is
            created, modified, or deleted.  Must implement POST according to the `/uss/operations/{id}`
            path API.
        constraint_url:
          anyOf:
          - $ref: '#/components/schemas/ConstraintDetailsURL'
          description: If specified, other clients will be instructed by the DSS to
            call this endpoint when a Constraint relevant to this Subscription is
            created, modified, or deleted.  Must implement POST according to the `/uss/constraints/{id}`
            path API.

    AirspaceConflictResponse:
      description: Data provided when an airspace conflict was encountered.
      type: object
      properties:
        message:
          description: Human-readable message indicating what error occurred and/or
            why.
          type: string
        entity_conflicts:
          description: List of Entity references for which current proof of knowledge
            was not provided.  If this field is present and contains elements, the
            calling USS should query the details URLs for these Entities to obtain
            their details and correct OVNs.  The OVNs can be used to update
            the key, at which point the USS may retry this call.
          type: array
          items:
            $ref: '#/components/schemas/EntityReference'
    
    OperationDetailsURL:
      anyOf:
      - $ref: '#/components/schemas/URL'
      description: |-
        The URL at which the details of an Operation may be retrieved.  See `/uss/operations/{id}` path for specification of this endpoint.  This URL is the base Operations resource.  If this URL is specified as https://my_utm_uss.com/operations then the details for a particular {id} may be obtained at the URL https://my_utm_uss.com/operations/{id}.  This URL may not have a trailing / character.
      example: https://my_utm_uss.com/operations

    ConstraintDetailsURL:
      anyOf:
      - $ref: '#/components/schemas/URL'
      description: |-
        The URL at which the details of a Constraint may be retrieved.  See `/uss/constraints/{id}` path for specification of this endpoint.
        This URL is the base Constraints resource.  If this URL is specified as https://my_utm_uss.com/constraints then the details for a particular {id} may be obtained at the URL https://my_utm_uss.com/constraints/{id}.  This URL may not have a trailing / character.
      example: https://my_utm_uss.com/constraints

    FeedbackURL:
      anyOf:
        - $ref: '#/components/schemas/URL'
      description: |-
        The URL at which feedback may be submitted.  See `/uss/feedback/{id}` path for specification of this endpoint.
        This URL is the base Feedback resource.  If this URL is specified as https://my_utm_uss.com/feedback then feedback with {id} may be submitted at the URL https://my_utm_uss.com/feedback/{id}.  This URL may not have a trailing / character.
      example: https://my_utm_uss.com/feedback

    OperationPriority:
      format: int32
      description: Ordinal priority of this Operation.  Determined by client USS via a function of the details of the Operation according to relevant regulations.  The simplest (non-prioritized) of these functions would be one that returns 0 priority for any Operations.
      type: integer

    OperationState:
      description: |-
        State of an Operation.

        `Proposed`: This Operation has not yet been fully deconflicted with other Entities, but the owning USS is pursuing negotiations to complete deconfliction.

        `Accepted`: This Operation was fully deconflicted from other Entities at the time it changed to this state, but no aircraft associated with it are active yet.

        `Activated`: One or more aircraft associated with this Operation are, or will imminently be, in flight.
      enum:
        - Proposed
        - Accepted
        - Activated
      type: string

#
#
#

  securitySchemes:
    Authority:
      flows:
        clientCredentials:
          tokenUrl: https://token_vendor.com/oauth/token
          scopes:
            utm.read.operations: Client may query, read, or create subscriptions for
              Operations for UTM.
            utm.write.operations: Client may create, edit, and delete Operations for
              UTM.
            utm.read.constraints: Client may query, read, or create subscriptions
              for Constraints for UTM.
            utm.write.constraints: Client may create, edit, and delete Constraints
              for UTM.
      type: oauth2
      description: |-
        Authorization from, or on behalf of, an authorization authority.  This authority shall issue access tokens that are JSON Web Tokens as defined in RFC 7519, using the `RS256` algorithm for the signature, and publish to all providers the public key for verifying that signature.

        The following fields shall be included in the JWT claim for access tokens issued by this authority:
        * `iss`, with the URL at which the token generation request was received.
        * `exp`, with a time no further than 1 hour in the future.
        * `sub`, with unique ID of the client requesting the access token.
        * `scope`, with an array of strings indicating the scopes granted.

        Multiple scopes for a single token shall be granted if requested.  The tokens granted by this authority shall protect against reuse of received tokens to impersonate the sender to other recipients (via use of the `aud` claim or other means).

        Clients shall provide these access tokens in an `Authorization` header in the form `Bearer <token>` in accordance with RFC 6750.

paths:
  #
  # DSS Endpoint: OPERATIONS
  #

  /v1/dss/operations:
    summary: Query all Operations in the DSS that intersect with a specified 4D-Volume.
    description: "Interface to Operation references in the DSS."

    get:
      tags:
      - "DSS Operations"
      security:
      - Authority:
        - utm.read.operations
      summary: /dss/operations
      description: Retrieve all Operations in the given area during
        the given time.  Note that references to some Operations lying entirely
        outside the requested area may be returned as well.
      parameters:
      - name: area
        description: The area in which to search for Operation entities.  References for some Operations near this area but wholly outside it may also be returned.
        schema:
          $ref: '#/components/schemas/Polygon'
        in: query
        required: true
      - name: time_start
        schema:
          $ref: '#/components/schemas/Time'
        description: If specified, indicates non-interest in any Operations that end
          before this time.  RFC 3339 format, per OpenAPI specification.
        in: query
        required: true
      - name: time_end
        schema:
          $ref: '#/components/schemas/Time'
        description: If specified, indicates non-interest in any Operations that start
          after this time.  RFC 3339 format, per OpenAPI specification.
        in: query
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchOperationReferenceResponse'
          description: Operations were successfully retrieved.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: One or more input parameters were missing or invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bearer access token was not provided in Authorization header,
            token could not be decoded, or token was invalid.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The access token was decoded successfully but did not include
            a scope appropriate to this endpoint.
        "413":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The requested area was too large.

  /v1/dss/operations/{id}:
    summary: Create/Update/Query a specific Operation in the DSS.
    parameters:
    - name: id
      description: EntityUUID of the Operation.
      schema:
        $ref: '#/components/schemas/EntityUUID'
      in: path
      required: true

    get:
      tags:
      - "DSS Operations"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetOperationReferenceResponse'
          description: Operation was retrieved successfully.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: One or more input parameters were missing or invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bearer access token was not provided in Authorization header,
            token could not be decoded, or token was invalid.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The access token was decoded successfully but did not include
            a scope appropriate to this endpoint.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The requested Entity could not be found.
      security:
      - Authority:
        - utm.read.operations
      summary: /dss/operations/{id}
      description: Retrieve Operation information from the DSS.

    put:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOperationReferenceParameters'
        required: true
      tags:
      - "DSS Operations"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChangeOperationReferenceResponse'
          description: An Operation was created successfully in the DSS.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: |-
            * One or more input parameters were missing or invalid.
            * The request attempted to mutate the Operation in a disallowed way.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bearer access token was not provided in Authorization header,
            token could not be decoded, or token was invalid.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The access token was decoded successfully but did not include
            a scope appropriate to this endpoint.
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AirspaceConflictResponse'
          description: |-
            * The provided key did not prove knowledge of all current and relevant airspace Entities
            * An Operation with the specified ID already exists.
            * Despite repeated attempts, the DSS was unable to complete the update because of other simultaneous changes.
        "413":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The area of the Operation is too large.

    delete:
      security:
        - Authority:
          - utm.write.operations
      summary: /dss/operations/{id}
      description: Delete an Operation.
      tags:
        - "DSS Operations"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChangeOperationReferenceResponse'
          description: The specified Operation was successfully removed from the DSS.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: |-
              * One or more input parameters were missing or invalid.
              * The request attempted to mutate the Operation in a disallowed way.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bearer access token was not provided in Authorization header,
              token could not be decoded, or token was invalid.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The access token was decoded successfully but did not include
              a scope appropriate to this endpoint.

  #
  # DSS Enpoint: CONSTRAINTS
  #

  /v1/dss/constraints:
    summary: Query all Constraints in the DSS that intersect with a specified 4D-Volume.
    description: ""

    get:
      security:
      - Authority:
        - utm.read.constraints
      summary: /dss/constraints
      description: Retrieve all Constraints in the given area during
        the given time.  Note that references to some Constraints lying entirely
        outside the requested area may be returned as well.
      tags:
      - "DSS Constraints"
      parameters:
      - name: area
        description: The area in which to search for Constraints.  References to some Constraints
          near this area but wholly outside it may also be returned.
        schema:
          $ref: '#/components/schemas/Polygon'
        in: query
        required: true
      - name: time_start
        schema:
          $ref: '#/components/schemas/Time'
        description: If specified, indicates non-interest in any Constraints that
          end before this time.  RFC 3339 format, per OpenAPI specification.
        in: query
        required: true
      - name: time_end
        schema:
          $ref: '#/components/schemas/Time'
        description: If specified, indicates non-interest in any Constraints that
          start after this time.  RFC 3339 format, per OpenAPI specification.
        in: query
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchConstraintReferencesResponse'
          description: Constraints were successfully retrieved.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: One or more input parameters were missing or invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bearer access token was not provided in Authorization header,
            token could not be decoded, or token was invalid.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The access token was decoded successfully but did not include
            a scope appropriate to this endpoint.
        "413":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The requested area was too large.

  /v1/dss/constraints/{id}:
    parameters:
    - name: id
      description: EntityUUID of the Constraint.
      schema:
        $ref: '#/components/schemas/EntityUUID'
      in: path
      required: true
    summary: Create/Update/Query a specific Constraint in the DSS.

    get:
      tags:
      - "DSS Constraints"
      security:
      - Authority:
        - utm.read.constraints
      summary: /dss/constraints/{id}
      description: Retrieve Constraint (reference) information from the DSS.
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetConstraintReferenceResponse'
          description: Constraint was retrieved successfully.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: One or more input parameters were missing or invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bearer access token was not provided in Authorization header,
            token could not be decoded, or token was invalid.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The access token was decoded successfully but did not include
            a scope appropriate to this endpoint.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The requested Entity could not be found.

    put:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateConstraintReferenceParameters'
        required: true
      tags:
      - "DSS Constraints"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChangeConstraintReferenceResponse'
          description: A Constraint was created successfully in the DSS.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: |-
            * One or more input parameters were missing or invalid.
            * The request attempted to mutate the Constraint in a disallowed way.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bearer access token was not provided in Authorization header,
            token could not be decoded, or token was invalid.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The access token was decoded successfully but did not include
            a scope appropriate to this endpoint.
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: |-
            * A Constraint with the specified ID already exists.
            * Despite repeated attempts, the DSS was unable to complete the update because of other simultaneous changes.
        "413":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The area of the Operation is too large.

    delete:
      tags:
      - "DSS Constraints"
      security:
        - Authority:
          - utm.write.constraints
      summary: /dss/constraints/{id}
      description: Delete a Constraint.
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChangeConstraintReferenceResponse'
          description: The Constraint was successfully removed from the DSS.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: |-
              * One or more input parameters were missing or invalid.
              * The request attempted to mutate the Constraint in a disallowed way.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bearer access token was not provided in Authorization header,
              token could not be decoded, or token was invalid.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The access token was decoded successfully but did not include
              a scope appropriate to this endpoint.
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: |-
              * A Constraint with the specified ID already exists.
              * Despite repeated attempts, the DSS was unable to complete the update because of other simultaneous changes.

#
# DSS Endpoint: SUBSCRIPTIONS
#

  /v1/dss/subscriptions:
    summary: Subscriptions for airspace updates to a volume of interest.

    get:
      tags:
      - "DSS Subscriptions"
      security:
      - Authority:
        - dss.read.subscriptions
      summary: /dss/subscriptions
      description: |-
        Retrieve subscriptions intersecting an area of interest.  Subscription notifications are only triggered by (and contain full information of) changes to, creation of, or deletion of, Entities referenced by or stored in the DSS; they do not involve any data transfer (such as remote ID telemetry updates) apart from Entity information.

        Only Subscriptions belonging to the caller are returned.  This endpoint would be used if a USS lost track of Subscriptions they had created and/or wanted to resolve an error indicating that they had too many existing Subscriptions in an area.
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchSubscriptionsResponse'
          description: Subscriptions were retrieved successfully.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: One or more input parameters were missing or invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bearer access token was not provided in Authorization header,
            token could not be decoded, or token was invalid.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The access token was decoded successfully but did not include
            a scope appropriate to this endpoint.
        "413":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The requested area was too large.

  #
  # DSS Endpoint: SUBSCRIPTIONS
  #
  
  /v1/dss/subscriptions/{id}:
    summary: Create/Update/Query a specific Subscription (reference) in the DSS.
    parameters:
    - name: id
      description: SubscriptionUUID of the subscription of interest.
      schema:
        $ref: '#/components/schemas/SubscriptionUUID'
      in: path
      required: true

    get:
      tags:
      - "DSS Subscriptions"
      summary: /dss/subscriptions/{id}
      security:
      - Authority:
        - dss.read.subscriptions
        - dss.write.subscriptions
      description: |-
        Create a subscription.  This call will fail if a Subscription with the same ID already exists.

        Subscription notifications are only triggered by (and contain full information of) changes to, creation of, or deletion of, Entities referenced by or stored in the DSS; they do not involve any data transfer (such as remote ID telemetry updates) apart from Entity information.
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetSubscriptionResponse'
          description: Subscription information was retrieved successfully.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: One or more input parameters were missing or invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bearer access token was not provided in Authorization header,
            token could not be decoded, or token was invalid.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The access token was decoded successfully but did not include
            a scope appropriate to this endpoint.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: A Subscription with the specified ID was not found.

    put:
      security:
      - Authority:
        - dss.write.subscriptions
      description: |-
        Create a subscription.  This call will fail if a Subscription with the same ID already exists.

        Subscription notifications are only triggered by (and contain full information of) changes to, creation of, or deletion of, Entities referenced by or stored in the DSS; they do not involve any data transfer (such as remote ID telemetry updates) apart from Entity information.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSubscriptionParameters'
        required: true
      tags:
      - "DSS Subscriptions"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PutSubscriptionResponse'
          description: A new Subscription was created successfully.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: |-
            * One or more input parameters were missing or invalid.
            * The request attempted to mutate the Subscription in a disallowed way.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bearer access token was not provided in Authorization header,
            token could not be decoded, or token was invalid.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: |-
            * The access token was decoded successfully but did not include a scope appropriate to this endpoint or the request.
            * An EntityType was specified in `types_filter` to which the scopes included in the access token do not provide access.
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: |-
            * A Subscription with the specified ID already exists and is owned by a different client.
            * Despite repeated attempts, the DSS was unable to complete the update because of other simultaneous changes.
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Client already has too many Subscriptions in the area where
            a new Subscription was requested.  To correct this problem, the client
            may query GET /subscriptions to see which Subscriptions are counting against
            their limit.  This problem should not generally be encountered because
            the Subscription limit should be above what any consumer that reasonably
            aggregates their Subscriptions should request.  But, a Subscription limit
            is necessary to bound performance requirements for DSS instances and would
            likely be hit by, e.g., a large remote ID display provider that created
            a Subscription for each of their display client users' views.

    delete:
      tags:
      - "DSS Subscriptions"
      security:
        - Authority:
          - dss.read.subscriptions
          - dss.write.subscriptions
      summary: /dss/subscriptions/{id}
      description: Remove a particular subscription.
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteSubscriptionResponse'
          description: Subscription was successfully removed from DSS.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: One or more input parameters were missing or invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bearer access token was not provided in Authorization header,
              token could not be decoded, or token was invalid.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The access token was decoded successfully but did not include
              a scope appropriate to this endpoint.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: A Subscription with the specified ID was not found.

  #
  # USS Endpoint: OPERATIONS
  #

  /v1/uss/operations/{id}:
    summary: Push/Query detailed information of an Operation.
    parameters:
    - name: id
      description: EntityUUID for this Operation (matches Operation identifier).
      schema:
        $ref: '#/components/schemas/EntityUUID'
      in: path
      required: true

    get:
      security:
      - Authority:
        - utm.read.operations
      summary: /uss/operations/{id}
      description: Retrieve full details of an Operation (directly from the entity owner).
      tags:
      - "USS Peer-to-Peer"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetOperationResponse'
          description: The full Operation information was retrieved successfully.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: One or more input parameters were missing or invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bearer access token was not provided in Authorization header,
            token could not be decoded, or token was invalid.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The access token was decoded successfully but did not include
            a scope appropriate to this endpoint.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The requested Entity could not be found.

    post:
      security:
      - Authority:
        - utm.write.operations
      summary: /uss/operations/{id}
      description: Push details of an Operation directly to a peer USS (usually because interaction with a DSS triggered this action).
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostOperationNotificationParameters'
        required: true
      tags:
      - "USS Peer-to-Peer"
      responses:
        "204":
          description: New or updated full Operation information received successfully.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: |-
            * One or more parameters were missing or invalid.
            * The Entity could not be parsed, or contains illegal data.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bearer access token was not provided in Authorization header,
            token could not be decoded, or token was invalid.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: |-
            * The access token was decoded successfully but did not include a scope appropriate to this endpoint.
            * The client identified in the access token is not the owner of this Entity according to the receiving client's records.
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The Entity version specified in this message is lower than
            a previously-received notification, or identical to a previously-received
            notification and the Entity is different.

  #
  # USS Endpoint: CONSTRAINTS
  #

  /v1/uss/constraints/{id}:
    summary: Push/Query detailed information of a Constraint.
    parameters:
    - name: id
      description: EntityUUID of the Constraint.
      schema:
        $ref: '#/components/schemas/EntityUUID'
      in: path
      required: true

    get:
      tags:
      - "USS Peer-to-Peer"
      security:
      - Authority:
        - utm.read.constraints
      summary: /uss/constraints/{id}
      description: Retrieve the full details of a Constraint (from the entity owner).
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetConstraintResponse'
          description: The full Constraint information was retrieved successfully.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: One or more input parameters were missing or invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bearer access token was not provided in Authorization header,
            token could not be decoded, or token was invalid.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The access token was decoded successfully but did not include
            a scope appropriate to this endpoint.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The requested Entity could not be found.

    post:
      security:
      - Authority:
        - utm.write.constraints
      summary: /uss/constraints/{id}
      description: Publish new information about a Constraint to the host of this
        endpoint (usually because of instructions from the DSS triggered by a subscription).
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostConstraintNotificationParameters'
        required: true
      tags:
      - "USS Peer-to-Peer"
      responses:
        "204":
          description: New or updated full Constraint information received successfully.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: |-
            * One or more parameters were missing or invalid.
            * The Entity could not be parsed, or contains illegal data.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bearer access token was not provided in Authorization header,
            token could not be decoded, or token was invalid.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: |-
            * The access token was decoded successfully but did not include a scope appropriate to this endpoint.
            * The client identified in the access token is not the owner of this Entity according to the receiving client's records.
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The Entity version specified in this message is lower than
            a previously-received notification, or identical to a previously-received
            notification and the Entity is different.

  #
  # USS Endpoint: (OTHER)
  #

  /v1/uss/feedback/{id}:
    summary: Endpoint to provide feedback (errors, etc.) that might otherwise go unnoticed by this USS.
    parameters:
     - name: id
       description: ID of the feedback.
       schema:
         $ref: '#/components/schemas/UUIDv4'
       in: path
       required: true

    put:
      security:
        - Authority:
          - utm.read.operations
          - utm.write.operations
          - utm.read.constraints
          - utm.write.constraints
      summary: /uss/feedback/{id}
      description: Notify USS of an error encountered that might otherwise go unnoticed.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutFeedbackParameters'
        required: true
      tags:
        - "USS Peer-to-Peer"
      responses:
        "204":
          description: Feedback received successfully.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeedbackURL'
          description: |-
            * One or more parameters were missing or invalid.
            * The feedback could not be parsed, or contains illegal data.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bearer access token was not provided in Authorization header,
            token could not be decoded, or token was invalid.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: |-
            * The access token was decoded successfully but did not include a scope appropriate to this endpoint.
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The Entity version specified in this message is lower than
            a previously-received notification, or identical to a previously-received
            notification and the Entity is different.
